<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch批量重建索引"><a href="#ElasticSearch批量重建索引" class="headerlink" title="ElasticSearch批量重建索引"></a>ElasticSearch批量重建索引</h1><blockquote><p>ver 7.16.2</p></blockquote><p>ES的设计目标是针对检索的, 对修改的支持不够好, 特别是对数据结构的修改, 和关系数据库不一样, 修改数据结构后, 索引的历史数据不会改变, 如果需要历史数据也应用修改后的结构和设置, 需要重建索引(Reindex).</p><p>重建索引的一般流程为:</p><ul><li>基于旧索引<code>index_old</code>结构修改部分配置后生成新索引<code>index_new</code></li><li>将数据通过<code>reindex</code>从<code>index_old</code>同步到<code>index_new</code></li><li>删除<code>index_old</code></li><li>给<code>index_new</code>一个别名<code>index_old</code>, 程序仍然直接使用<code>index_old</code>操作索引</li></ul><h2 id="Kibana-Dev-Tools"><a href="#Kibana-Dev-Tools" class="headerlink" title="Kibana Dev Tools"></a>Kibana Dev Tools</h2><p>当索引数量很少时, 可以采用kibana的devtool, 可视化操作, 对用户友好.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 1.获取源索引结构, 备份或者作为新索引的依据</span><br><span class="line">GET my_index</span><br><span class="line"></span><br><span class="line"># 2.根据源索引结构做修改后, 新建索引, 建议同步数据之前关闭新索引的刷新和副本</span><br><span class="line">PUT my_index_alias</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    //...new mappings</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    //...new settings</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">        // 新索引关闭刷新和副本, 提高后续的写入效率</span><br><span class="line">        &quot;refresh_interval&quot;: &quot;-1&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 3.异步执行重建并同步数据到新索引</span><br><span class="line"># slices多分片并行, 增大size提高每批处理条数, proceed忽略冲突数据(理论上新索引不存在冲突数据)</span><br><span class="line">POST _reindex?slices=auto&amp;wait_for_completion=false</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;my_index&quot;,</span><br><span class="line">    &quot;size&quot;: 5000</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;my_index_alias&quot;,</span><br><span class="line">    &quot;op_type&quot;: &quot;create&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;conflicts&quot;: &quot;proceed&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 4.查看task进度</span><br><span class="line">## 使用上一步返回的ID查询 </span><br><span class="line">GET /_tasks/CzIa7FVORqu6sRH1U0LUMw:2873350476</span><br><span class="line">## 查询所有重建索引的任务</span><br><span class="line">GET _tasks?detailed=true&amp;actions=*reindex</span><br><span class="line"></span><br><span class="line"># 5.索引重建完成后删除旧索引</span><br><span class="line">DELETE my_index</span><br><span class="line"></span><br><span class="line"># 6.新索引别名为旧索引</span><br><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;add&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;my_index_alias&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;my_index&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 7.新索引启用副本和刷新</span><br><span class="line">PUT my_index_alias/_settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index&quot;: &#123;</span><br><span class="line">    &quot;refresh_interval&quot;: &quot;1s&quot;,</span><br><span class="line">    &quot;number_of_replicas&quot;: &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚本批量重建"><a href="#脚本批量重建" class="headerlink" title="脚本批量重建"></a>脚本批量重建</h2><p>一般生产环境下, 同一类型的索引会按天或者按类型分成多个索引, 方便运维, 但这样会为重建索引带来不便.<br>这种场景下可以使用下列脚本, 通过循环传入索引名达到批量重建索引的目的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">es_url=http://ip:port</span><br><span class="line">username=username</span><br><span class="line">password=password</span><br><span class="line">index_old_name=需重建的索引名</span><br><span class="line">index_new_name=$&#123;index_old_name&#125;_new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function error_exit() &#123;</span><br><span class="line">echo -e &quot;\e[31m 操作失败 \e[0m&quot;;</span><br><span class="line">exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line">script_path=$(cd `dirname $0`; pwd)</span><br><span class="line">index_dest_config=&quot;&quot;</span><br><span class="line">one_line_config=&quot;&quot;</span><br><span class="line">if [[ -f &quot;$&#123;script_path&#125;/config.json&quot; ]];then</span><br><span class="line">echo &quot;0.发现新索引配置: $&#123;script_path&#125;/config.json&quot;</span><br><span class="line">index_dest_config=$(cat $&#123;script_path&#125;/config.json)</span><br><span class="line">echo $index_dest_config</span><br><span class="line">one_line_config=$(echo $index_dest_config)</span><br><span class="line">else</span><br><span class="line">echo &quot;0.未发现新索引配置, 根据旧索引为你生成了一份配置: $script_path/config.json, 请修改.&quot;</span><br><span class="line">index_dest_config=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X GET &quot;$&#123;es_url&#125;/$&#123;index_old_name&#125;?pretty&quot; &gt; config.json)</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;1.新建索引...&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X PUT -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/$&#123;index_new_name&#125;&quot; -d &quot;@$&#123;script_path&#125;/config.json&quot;) </span><br><span class="line">echo $result</span><br><span class="line">echo &quot;$result&quot; | grep &#x27;&quot;acknowledged&quot;:true&#x27; || error_exit</span><br><span class="line"></span><br><span class="line">echo &quot;2.查询新索引详情并保存初始的副本数和刷新间隔, 方便后面恢复...&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X GET &quot;$&#123;es_url&#125;/$&#123;index_new_name&#125;?pretty&quot;)</span><br><span class="line">echo $result</span><br><span class="line">echo $result | grep -v &#x27;error&#x27; || error_exit</span><br><span class="line"></span><br><span class="line">duplicate=$(echo &quot;$result&quot; | grep number_of_replicas | sed &#x27;s/,//g&#x27;)</span><br><span class="line">refresh=$(echo &quot;$result&quot; | grep refresh_interval | sed &#x27;s/,//g&#x27;)</span><br><span class="line">echo -e &quot;$&#123;duplicate&#125;\n$&#123;refresh&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;3.重建索引之前关闭刷新和副本, 优化新索引的写入速度, 从而提高索引重建速度...&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X PUT -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/$&#123;index_new_name&#125;/_settings&quot; -d \</span><br><span class="line">&#x27;&#123;&quot;index&quot;: &#123;&quot;refresh_interval&quot;: &quot;-1&quot;,&quot;number_of_replicas&quot;: &quot;0&quot;&#125;&#125;&#x27;)</span><br><span class="line">echo $result</span><br><span class="line">echo $result | grep &#x27;&quot;acknowledged&quot;:true&#x27; || error_exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;4.开始重建索引...&quot;</span><br><span class="line">task=`curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X POST -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/_reindex?slices=auto&amp;wait_for_completion=false&quot; -d \</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;&#x27;$&#123;index_old_name&#125;&#x27;&quot;,</span><br><span class="line">    &quot;size&quot;: 5000</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;&#x27;$&#123;index_new_name&#125;&#x27;&quot;,</span><br><span class="line">    &quot;op_type&quot;: &quot;create&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;conflicts&quot;: &quot;proceed&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;`</span><br><span class="line"></span><br><span class="line">echo &quot;$task&quot;</span><br><span class="line">echo &quot;$task&quot; | grep &#x27;&quot;task&quot;:&#x27; || error_exit</span><br><span class="line">task_id=`echo &quot;$task&quot; | awk -F &#x27;&quot;&#x27; &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">echo &quot;task_id=$task_id&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while [ 1 ]</span><br><span class="line">do</span><br><span class="line">      sleep 1</span><br><span class="line">      task_status=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X GET &quot;$&#123;es_url&#125;/_tasks/$&#123;task_id&#125;?pretty&quot;)</span><br><span class="line">  echo &quot;$task_status&quot;</span><br><span class="line">  if [[ -n $(echo &quot;$task_status&quot; | grep complete | grep true) ]];then</span><br><span class="line">echo &quot;$index_old_name -&gt; $index_new_name 索引重建完成.&quot;</span><br><span class="line">break</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;$index_old_name -&gt; $index_new_name 重建中...&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;5.删除旧索引&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X DELETE -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/$&#123;index_old_name&#125;&quot;) </span><br><span class="line">echo $result</span><br><span class="line">echo $result | grep &#x27;&quot;acknowledged&quot;:true&#x27; || error_exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;6.新索引使用旧索引别名&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X POST -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/_aliases&quot; -d \</span><br><span class="line">&#x27;&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;add&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;&#x27;$&#123;index_new_name&#125;&#x27;&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;&#x27;$&#123;index_old_name&#125;&#x27;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;&#x27;</span><br><span class="line">) </span><br><span class="line">echo $result</span><br><span class="line">echo $result | grep &#x27;&quot;acknowledged&quot;:true&#x27; || error_exit</span><br><span class="line"></span><br><span class="line">echo &quot;7.恢复副本和刷新设置&quot;</span><br><span class="line">result=$(curl -ks -u $&#123;username&#125;:$&#123;password&#125; -X PUT -H &quot;Content-Type: application/json&quot; &quot;$&#123;es_url&#125;/$&#123;index_new_name&#125;/_settings&quot; -d \</span><br><span class="line">&#x27;&#123;&quot;index&quot;: &#123;&#x27;$&#123;duplicate&#125;&#x27;,&#x27;$&#123;refresh&#125;&#x27;&#125;&#125;&#x27;)</span><br><span class="line">echo $result</span><br><span class="line">echo $result | grep &#x27;&quot;acknowledged&quot;:true&#x27; || error_exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="Arthas线上排障"><a href="#Arthas线上排障" class="headerlink" title="Arthas线上排障"></a>Arthas线上排障</h1><h2 id="场景1-Nacos-Client访问不到配置中心"><a href="#场景1-Nacos-Client访问不到配置中心" class="headerlink" title="场景1. Nacos Client访问不到配置中心"></a>场景1. Nacos Client访问不到配置中心</h2><blockquote><p>Nacos-Server/Nacos-Client: v2.0.4</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Nacos-Server因安全需要需要开启鉴权, 所有Client访问配置中心都需要提供控制台账户和密码. </p><ul><li><p>Server配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nacos.core.auth.enabled=true</span><br><span class="line">nacos.core.auth.enable.userAgentAuthWhite=false</span><br><span class="line">nacos.core.auth.server.identity.key=serverAuthKey</span><br><span class="line">nacos.core.auth.server.identity.value=serverAuthValue</span><br></pre></td></tr></table></figure></li><li><p>Client配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar app.jar -Dnacos.username=nacos -Dnacos.password=大写密码</span><br></pre></td></tr></table></figure></li></ul><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>服务启动后，日志一直报<code>403 unknow user!!</code>, 滚动一段时间后， 应用退出。</p><p>使用Client启动命令中配置的用户名密码能够正常登录<code>nacos-server</code>控制台。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>能正常登录控制台，证明密码没问题。</li><li>本次部署是初次部署，考虑到配置可能有误，拷贝测试环境的<code>nacos-server</code>配置到部署环境，重新部署，问题依旧存在。</li><li>根据错误信息，定位<code>nacos-server</code>源码<code>com.alibaba.nacos.console.security.nacos.NacosAuthManager#resolveTokenFromUser</code>是执行校验的主要方法，用户名和密码通过参数传入。</li><li>使用Arthas监听该方法，看Client传过来的到底是个什么玩意</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch com.alibaba.nacos.console.security.nacos.NacosAuthManager resolveTokenFromUser &#x27;&#123;params,returnObj,throwExp&#125;&#x27; -x 3</span><br></pre></td></tr></table></figure><ol start="5"><li>启动Client后，Client发送过来的请求中，初次携带的鉴权信息是正确的，第二次及以后的密码变成了小写。</li></ol><p><img src="https://img2023.cnblogs.com/blog/1790305/202308/1790305-20230807173255866-1009175722.png" alt="result"></p><ol start="6"><li>去官方issue列表查询，未发现类似问题，源码也没发现有改变配置大小写的地方，从上一步可知Client启动后有一次请求的鉴权信息是正确的, 这次访问配置中心是成功的, 而后续鉴权信息就发生变更了, 可能是来自配置中心的配置覆盖了本地配置, 经排查, Client依赖的配置文件内, 确实存在同名的配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">小写密码</span></span><br></pre></td></tr></table></figure><ol start="7"><li>去除该配置后, Client启动正常</li></ol><h2 id="场景2-Nacos-Client突发数据库连接异常，错误日志剧增"><a href="#场景2-Nacos-Client突发数据库连接异常，错误日志剧增" class="headerlink" title="场景2. Nacos Client突发数据库连接异常，错误日志剧增"></a>场景2. Nacos Client突发数据库连接异常，错误日志剧增</h2><h3 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h3><p>Nacos Client运行一段时间后突发数据库连接异常，服务不可用，且错误日志剧增，导致磁盘告警。</p><p><img src="https://img2023.cnblogs.com/blog/1790305/202308/1790305-20230807174733550-989517555.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/1790305/202308/1790305-20230807174751639-749007158.png" alt="img"></p><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><ol><li>数据库认证信息放在nacos配置中心，用认证信息手动连接数据库正常，确认密码无问题。</li><li>网络搜索的部分解决方案为增大连接池核心连接数，增加连接超时时间，增加keepalive设置等，与配置现状一致，排除此类问题。</li><li>定位源码，Arthas线上定点爆破。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch org.postgresql.core.v3.ConnectionFactoryImpl doAuthentication &quot;&#123;params, target, returnObj, throwExp&#125;&quot; -b -x 3</span><br></pre></td></tr></table></figure><ol start="4"><li>项目中用了jasypt配置文件加解密，理论上应用上下文中应该是解密后的认证信息，但是从运行时来看，新建数据库连接时用的都是密文，显然不正常。</li></ol><p><img src="https://img2023.cnblogs.com/blog/1790305/202308/1790305-20230807175343714-234880678.png" alt="img"></p><ol start="5"><li>查看历史日志，找到最初报错的那天，刚好有一次配置变更，但和数据库的配置无关，但这是唯一事件源，只有可能是这次操作导致的。nacos配置中心的配置项变更后，下游服务都会重新刷新上下文，猜测可能刷新后未进行解密。去jasypt组件搜索issue，发现使用的版本果然存在此<a href="https://github.com/ulisesbocchio/jasypt-spring-boot/issues/343">bug#343</a>，受影响的范围是所有的加密属性，升级jasypt版本后问题解决。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>善用工具。故障的来源多种多样，有人为的，有源码的bug等等，我们往往很难快速找到问题的根因，更何况测试环境验证是通过的。这个时候线上排障工具尤为重要，使用Arthas可以轻松定点爆破线上故障点，为排障提供最直接的灵感来源。</li><li>明确配置边界。明确哪些配置是需要放在Client本地的，哪些是需要放在配置中心的，配置中心的优先级高于本地，非常容易出现配置覆盖问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 案例分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java应用 内存溢出&amp;CPU占满 排查</title>
      <link href="//posts/f7a2b51b/"/>
      <url>//posts/f7a2b51b/</url>
      
        <content type="html"><![CDATA[<h1 id="Java应用-内存溢出-amp-CPU占满-排查"><a href="#Java应用-内存溢出-amp-CPU占满-排查" class="headerlink" title="Java应用 内存溢出&amp;CPU占满 排查"></a>Java应用 内存溢出&amp;CPU占满 排查</h1><ul><li><p>1.获取异常进程ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -m</span><br></pre></td></tr></table></figure></li><li><p>2.保存堆快照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=/data/logdir/dump.hprof [PID]</span><br></pre></td></tr></table></figure></li><li><p>3.观察GC状况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">采样10次(2秒/次)后结束, 5行1组输出</span></span><br><span class="line">jstat -gcutil -t -h5 [PID] 2s 10</span><br></pre></td></tr></table></figure></li><li><p>4.获取进程内线程详情, 观察异常线程ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -Hp [PID]</span><br></pre></td></tr></table></figure></li><li><p>5.根据线程id的16进制过滤出JVM线程, 大致得知是哪块线程出问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack 进程ID | grep (`printf &#x27;%x&#x27; 线程ID`)</span><br></pre></td></tr></table></figure></li><li><p>6.利用EclipseMemoryAnalyzer分析, 导入堆快照, 选择 <code>Leak Suspects</code>, 查看问题对象</p></li><li><p>7.利用Jdk自带JavaVisual导出快照后找到对应的类实例, 右键<code>显示最近的垃圾回收根节点</code>后选中实例右键<code>在线程中显示</code>, 定位对象产生代码段。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 案例分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生产故障排查</title>
      <link href="//posts/f7a2b51c/"/>
      <url>//posts/f7a2b51c/</url>
      
        <content type="html"><![CDATA[<p>Q1. 压测未关闭访问记录入库redis导致存储量过大，后期应用定时转存至db时直接keys周期内所有记录，导致应用内存溢出</p><p>A1.</p><ol><li>首先暂时解决，设置开关，压测时关闭开关，压测数据本来也不应该记录</li><li>事后考虑用户量上去了，接近压测的场景会不会出现，当前设计能否经得住考验？<ul><li>2.1 不替换组件，分批读取，利用redis list数据结构，按转存周期设置key，value为list，根据size大小分批多线程转存。<a href="https://jishuin.proginn.com/p/763bfbd5f0b7">redisTemplate命令</a></li><li>2.2 转存任务不用java应用，改用脚本直连定时执行，需要一台机器有对应的脚本运行环境，如python。<a href="https://blog.csdn.net/HS_blog/article/details/82708681">python实现redis转存至mysql</a></li><li>2.3 调用记录转存至mysql后期还需写定时任务去清理，直接打印日志通过ELK拉取存储，设置过期策略，实时性比上述两种定时任务高。</li></ul></li></ol><p>Q2.</p>]]></content>
      
      
      <categories>
          
          <category> 案例分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="Helm-3-实践"><a href="#Helm-3-实践" class="headerlink" title="Helm 3 实践"></a>Helm 3 实践</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>windows: <a href="https://github.com/helm/helm/releases">Github Release</a> – *-windows-amd64.zip</p><h2 id="初始化一个应用"><a href="#初始化一个应用" class="headerlink" title="初始化一个应用"></a>初始化一个应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm create appname</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis速学"><a href="#Redis速学" class="headerlink" title="Redis速学"></a>Redis速学</h1><blockquote><p>ver 6.0.20</p></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis singletone</span></span><br><span class="line">docker run --name some-redis -d redis:6.0.20-alpine</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">redis-cli</span></span><br><span class="line">docker run -it --rm --link=some-redis redis:6.0.20-alpine redis-cli -h some-redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To <span class="built_in">set</span> redis-cli preferences:</span></span><br><span class="line">      &quot;:set hints&quot; 开启命令提示</span><br><span class="line">      &quot;:set nohints&quot; 关闭命令提示</span><br></pre></td></tr></table></figure><h2 id="Commands-Redis"><a href="#Commands-Redis" class="headerlink" title="Commands | Redis"></a><a href="https://redis.io/commands/">Commands | Redis</a></h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><blockquote><p>value limit 512mb</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET key</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NX不存在才设置, XX存在才设置</span></span><br><span class="line">SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX]</span><br><span class="line">MSET key value [key value ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与SET后面跟NX参数一样, 通常用来实现锁</span></span><br><span class="line">MSETNX key value [key value ...]</span><br></pre></td></tr></table></figure><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>底层实现: <code>链表</code>(最大长度2^32-1). 因为对于大型数据库系统来说, 快速插入是很重要的基础功能. </p><p>其中<code>LPUSH</code>,<code>LPOP</code>, <code>RPUSH</code>, <code>RPOP</code>等左右元素操作的结合, 可以轻易实现队列或栈这样的上层数据结构.</p><p>常用场景: </p><ul><li>构造有限集合, 如最新的n条数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 构造含1000个最新元素的列表</span><br><span class="line">LPUSH newest element [element ...]</span><br><span class="line">LTRIM newest 0 999</span><br><span class="line"># 全部取出. LRANGE理论上时间为O(N),但实际取头尾的少量元素时,通常为O(1)</span><br><span class="line">LRANGE 0 -1</span><br></pre></td></tr></table></figure><ul><li>生产-消费者, 建议使用阻塞命令, 避免redis处理太多的无用请求(空调表将一直返回null)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生产元素到queue</span></span><br><span class="line">LPUSH queue element [element ...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从queue消费元素, 阻塞5s直到获取到元素为止, 否则返回nil</span></span><br><span class="line">BRPOP queue 5</span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装-基于wsl</title>
      <link href="//posts/740b0eaf/"/>
      <url>//posts/740b0eaf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考: <a href="https://seepine.com/docker/wsl-install/">Windows 下 wsl2 安装 Linux 原生 Docker</a></p></blockquote><blockquote><p>使用 wsl2 而非 Docker desktop 安装 Docker，体验完全接近 Linux 的使用 Docekr 方式。并解决 wsl2 中 Docker 启动不了的问题。</p></blockquote><h2 id="一、安装-wsl2"><a href="#一、安装-wsl2" class="headerlink" title="一、安装 wsl2"></a>一、安装 wsl2</h2><p>官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">https://learn.microsoft.com/zh-cn/windows/wsl/install-manual</a></p><ol><li>启用 Linux 的 Windows 子系统</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><ol start="2"><li>启用虚拟机功能</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ol start="3"><li>下载 Linux 内核更新包</li></ol><ul><li>amd64（大部分电脑）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</span><br></pre></td></tr></table></figure><ul><li>arm64</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi</span><br></pre></td></tr></table></figure><ol start="4"><li>将 WSL 2 设置为默认版本</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="5"><li>安装所选的 Linux 分发<br>打开微软商店，搜例如 Ubuntu，选择合适的版本下载安装即可。</li></ol><h2 id="二、安装-Docker"><a href="#二、安装-Docker" class="headerlink" title="二、安装 Docker"></a>二、安装 Docker</h2><p>官方文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><ol><li>卸载旧版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="keyword">do</span> sudo apt-get remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置 docker 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add Docker&#x27;s official GPG key:</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the repository to Apt sources:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | \</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>若出现域名无法解析的错误，可尝试使用阿里云的 DNS 服务器。<code>vim /etc/resolv.conf</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><ul><li>若出现源不可用/速度慢的情况，可尝试使用国内的 apt 镜像源。<code>vim /etc/apt/sources.list</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装 Docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><ol start="4"><li>加入 Docker 用户组</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 执行后重新再打开终端</span></span><br></pre></td></tr></table></figure><ol start="5"><li>配置防火墙</li></ol><p>为什么需要多这一步？因为 wsl2 系统中使用的是经过修改的 nftables，而 Docker 安装程序使用 iptables 进行 NAT。为了解决这个问题，必须使用以下命令将系统切换回使用传统的 iptables，否则无法启动成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --<span class="built_in">set</span> iptables /usr/sbin/iptables-legacy</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> ip6tables /usr/sbin/ip6tables-legacy</span><br></pre></td></tr></table></figure><ol start="6"><li>配置 Docker</li></ol><p><code>/etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://uh06sk44.mirror.aliyuncs.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://registry.cn-hangzhou.aliyuncs.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;500m&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>启动 Docker，并配置自启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 也可以用此命令启动了</span></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="8"><li>配置 WSL 开机自启</li></ol><p>用户目录下新建 .wslconfig 文件，添加<code>systemd=true</code>， 在此也可以配置 cpu 和内存等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Settings apply across all Linux distros running on WSL 2</span></span><br><span class="line">[wsl2]</span><br><span class="line"><span class="comment"># Limits VM memory to use no more than 4 GB, this can be set as whole numbers using GB or MB</span></span><br><span class="line">memory=4GB</span><br><span class="line"><span class="comment"># Sets the VM to use two virtual processors</span></span><br><span class="line">processors=4</span><br><span class="line"><span class="comment"># Sets amount of swap storage space to 8GB, default is 25% of available RAM</span></span><br><span class="line">swap=0</span><br><span class="line"><span class="comment"># Turn off default connection to bind WSL 2 localhost to Windows localhost</span></span><br><span class="line">localhostForwarding=<span class="literal">true</span></span><br><span class="line"><span class="comment"># Support systemcel cmd</span></span><br><span class="line">systemd=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果未生效, 在子系统内的 <code>/etc/wsl.conf</code> 文件添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[network]</span><br><span class="line"># 防止DNS被覆盖</span><br><span class="line">generateResolvConf = false</span><br><span class="line">[boot]</span><br><span class="line">systemd=true</span><br></pre></td></tr></table></figure><ol start="9"><li>检测状态<br>进入 Linux 子系统后执行命令，输出<code>systemd</code> 则开启，<code>init</code> 则是关闭</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps --no-headers -o <span class="built_in">comm</span> 1</span><br><span class="line">systemd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo评论系统白嫖失败</title>
      <link href="//posts/c7e035d/"/>
      <url>//posts/c7e035d/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo评论系统白嫖失败"><a href="#Hexo评论系统白嫖失败" class="headerlink" title="Hexo评论系统白嫖失败"></a>Hexo评论系统白嫖失败</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>部署使用 gitee pages &amp; github pages</li><li>使用pages的免费域名</li><li>白嫖，不使用一分钱</li><li>主题， butterfly</li></ul><h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><ul><li>国内版需要备案域名，pass. 选择<a href="https://leancloud.app/">国际版</a>, 注册一切正常。</li><li>配置好Valine后，<code>serverURLs</code> 出现跨域问题, 不知道如何解决</li><li>就算解决了跨域问题, <a href="https://github.com/orgs/walinejs/discussions/1203">2022年8月1日起，LeanCloud 国际版共享域名不再向中国大陆提供服务</a>, 因此, restapi照样不能访问</li></ul><h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><ul><li>申请注册OAuth一切正常</li><li>在博客域<a href="https://github.com/login/oauth/access_token">登录github</a>出现跨域问题, 详情参考<a href="https://github.com/isaacs/github/issues/330">OAuth web flow endpoints don’t support CORS</a></li><li>gitalk提供的跨域默认代理失效, 个人申请<a href="https://dash.cloudflare.com/login">cloudfare worker</a>免费服务(每天10w次免费请求)自建代理, 其服务域名为<code>xxx.worker.dev</code>, 很不幸, 国内该域名也被墙.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主题支持的其他免费评论服务, 本人没有全部去尝试, 但猜测都应该会有各种各样的问题, 在如今的大环境下, 想使用免费的服务确实会有困难, 暂时也没有想去部署私有化评论系统的想法(<del>毕竟想白嫖</del>), 想要交流的欢迎给我<a href="mailto:1518293354@qq.com">发email</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境初始化</title>
      <link href="//posts/fe53242e/"/>
      <url>//posts/fe53242e/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境初始化"><a href="#开发环境初始化" class="headerlink" title="开发环境初始化"></a>开发环境初始化</h1>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile-Jdk带证书</title>
      <link href="//posts/5c1983e/"/>
      <url>//posts/5c1983e/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile-Jdk带证书"><a href="#Dockerfile-Jdk带证书" class="headerlink" title="Dockerfile-Jdk带证书"></a>Dockerfile-Jdk带证书</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> klong</span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">ENV</span> JAVA_VERSION=<span class="number">8</span>u345</span><br><span class="line"><span class="keyword">ENV</span> JAVA_ALPINE_VERSION=<span class="string">&quot;8.345.01-r3&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/lib/jvm/java-<span class="number">1.8</span>-openjdk</span><br><span class="line"><span class="keyword">ENV</span> PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/jre/bin:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &#123; <span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span>; <span class="built_in">echo</span> <span class="string">&#x27;set -e&#x27;</span>; <span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">&#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;</span>; &#125; &gt; /usr/local/bin/docker-java-home &amp;&amp;  \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> +x /usr/local/bin/docker-java-home &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># 时区设置</span></span></span><br><span class="line">    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp;  echo $TZ &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    <span class="comment"># 替换并更新源列表</span></span><br><span class="line">    sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp; apk update --no-cache &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装jdk并校验是否安装成功</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="language-bash"> --no-cache openjdk8=<span class="string">&quot;<span class="variable">$JAVA_ALPINE_VERSION</span>&quot;</span> &amp;&amp; [ <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> = <span class="string">&quot;<span class="subst">$(docker-java-home)</span>&quot;</span> ] &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># 安装证书并更新</span></span></span><br><span class="line">    apk <span class="keyword">add</span><span class="language-bash"> --no-cache ca-certificates &amp;&amp; update-ca-certificates -f</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ExceptionHandler执行顺序</title>
      <link href="//posts/1cc22fa9/"/>
      <url>//posts/1cc22fa9/</url>
      
        <content type="html"><![CDATA[<h1 id="ExceptionHandler执行顺序"><a href="#ExceptionHandler执行顺序" class="headerlink" title="ExceptionHandler执行顺序"></a>ExceptionHandler执行顺序</h1><p>场景：拦截异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>不同类都存在对MyException的拦截器：按 @Order 决定优先级</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvise</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler1</span> &#123;&#125; <span class="comment">//优先执行Handler1内拦截器。 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvise</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>同一个类中存在两个拦截器分别拦截MyException和Exception：拦截器越接近实现类，越优先<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvise</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler1</span> &#123;</span><br><span class="line">  <span class="meta">@ExceptionHandler(MyException.class)</span></span><br><span class="line">  <span class="keyword">public</span> AicErrorResponse <span class="title function_">handleMyException</span><span class="params">(Exception e, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//do something - 优先执行</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">  <span class="keyword">public</span> AicErrorResponse <span class="title function_">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql in &amp; exist</title>
      <link href="//posts/f6f7d532/"/>
      <url>//posts/f6f7d532/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-in-amp-exist"><a href="#mysql-in-amp-exist" class="headerlink" title="mysql in &amp; exist"></a>mysql in &amp; exist</h1><blockquote><p><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">mysql-explain</a></p><p><a href="https://cloud.tencent.com/developer/article/1093229">mysql explain详解</a></p></blockquote><h1 id="in-amp-exist"><a href="#in-amp-exist" class="headerlink" title="in &amp; exist"></a>in &amp; exist</h1><p>有一种说法，说exists性能比in要好，其实不全然。哪个性能更好，需要看具体的需求场景。<br>1、如何选择使用in 或者 exists？</p><ul><li>子表数据量比外表数据量少，使用in。</li><li>子表数据量比外表数据量大，使用exists。</li><li>子表与外表数据量大小差不多，用in与exists的效率相差不大。</li></ul><p>2、原因分析</p><ul><li><p>in：使用hash将外表与内表连接, 会用到A表的id索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from A where id in (select id from B) </span><br></pre></td></tr></table></figure><p>以上查询使用了in语句, in()只执行一次, 它查出B表中的所有id字段并缓存起来. 之后, 检查A表的id是否与B表中的id相等, 如果相等则将A表的记录加入结果集中, 直到遍历完A表的所有记录.</p></li><li><p>A表有10000条记录, B表有1000000条记录, 那么最多有可能遍历10000*1000000次, 效率很差.</p></li><li><p>A表有10000条记录,B表有100条记录,那么最多有可能遍历10000*100次,遍历次数大大减少,效率大大提升.</p></li><li><p>exists：对外表做loop循环，每次loop循环再对子表进行访问, 会用B表的id索引。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.* from A a where exists(select 1 from B b where a.id=b.id) </span><br></pre></td></tr></table></figure><p>以上查询使用了exists语句,exists()会执行A.length次,它并不缓存exists()结果集,因为exists()结果集的内容并不重要,重要的是结果集中是否有记录,如果有则返回true,没有则返回false.</p><p>当B表比A表数据大时适合使用exists(),因为它没有那么遍历操作,只需要再执行一次查询就行.</p><ul><li><p>A表有10000条记录,B表有1000000条记录,那么exists()会执行10000次去判断A表中的id是否与B表中的id相等.</p></li><li><p>A表有10000条记录,B表有100000000条记录,那么exists()还是执行10000次,因为它只执行A.length次,可见B表数据越多,越适合exists()发挥效果.</p></li><li><p>A表有10000条记录,B表有100条记录,那么exists()还是执行10000次,还不如使用in()遍历10000*100次,因为in()是在内存里遍历比较,而exists()需要查询数据库,我们都知道查询数据库所消耗的性能更高,而内存比较很快.</p></li></ul><p>3、not in 和 not exists<br>使用not in 会内外表都全表扫描；使用not exists还能用上内表（子表）的索引。所以，一定建议使用Not exists</p><p>4、显示传入大量的元素</p><ul><li>mysql5.7：只能in(元素集)</li><li>mysql&gt;=8.0.19：values构建临时表, 执行效率暂未测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table_a where column_a in (values row(&#x27;a&#x27;),row(&#x27;b&#x27;), ...1000+) </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgre常用命令</title>
      <link href="//posts/5af9abaf/"/>
      <url>//posts/5af9abaf/</url>
      
        <content type="html"><![CDATA[<h1 id="postgre常用命令"><a href="#postgre常用命令" class="headerlink" title="postgre常用命令"></a>postgre常用命令</h1><h2 id="解决锁表问题"><a href="#解决锁表问题" class="headerlink" title="解决锁表问题"></a>解决锁表问题</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 产生的死锁信息集 A</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_locks <span class="keyword">where</span> relation <span class="operator">=</span> (<span class="keyword">select</span> oid <span class="keyword">from</span> pg_class <span class="keyword">where</span> relname<span class="operator">=</span><span class="string">&#x27;tablename&#x27;</span>)</span><br><span class="line"><span class="comment">-- 查看数据库空闲连接, 服务停机后, 数据库不会马上释放连接, 如果马上超限，需要配立即释放空闲连接，参考 https://blog.51cto.com/u_13126942/2047679</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> state <span class="operator">=</span> <span class="string">&#x27;idle&#x27;</span></span><br><span class="line"><span class="comment">--取消后台操作，回滚未提交事物, kill select</span></span><br><span class="line"><span class="keyword">select</span> pg_cancel_backend(pid)</span><br><span class="line"><span class="comment">--中断session，回滚未提交事物, kill anything</span></span><br><span class="line"><span class="keyword">select</span> pg_terminate_backend(pid)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgre 隐式转换(implicit conversion)导致索引失效</title>
      <link href="//posts/fca28bcf/"/>
      <url>//posts/fca28bcf/</url>
      
        <content type="html"><![CDATA[<h1 id="postgre-隐式转换-implicit-conversion-导致索引失效"><a href="#postgre-隐式转换-implicit-conversion-导致索引失效" class="headerlink" title="postgre 隐式转换(implicit conversion)导致索引失效"></a>postgre 隐式转换(implicit conversion)导致索引失效</h1><blockquote><p>postgre<sup><a href="#ref1">1</a></sup>+ springboot + mybatis</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>生产环境, 一个普通的接口, 上线的时候没有建立索引，随着时间的流逝，数据量越来越大(1kw+)，出现性能问题，决定给 <code>collect_name</code><br>和 <code>collect_time</code>加上索引。 开发人员只在测试环境做过纯sql的测试，但没有在测试环境用大量数据做场景还原，上线后发现接口性能未得到优化。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> tb</span><br><span class="line"><span class="keyword">where</span> tb.collect_name = <span class="string">&#x27;collect_name&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> tb.collect_time = <span class="string">&#x27;2022-02-02 00:00:00&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> tb_name_idx <span class="keyword">on</span> tb (collect_name);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> tb_collect_time_idx <span class="keyword">on</span> tb (collect_time);</span><br></pre></td></tr></table></figure><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>优化后上线，接口响应时间未见明显改变(20s)，sql-stat打印慢sql。 用DBeaver执行并分析日志打印的慢sql，却是走了索引且速度很快(<br>3s)</p><p>尝试下列手段无效：</p><ul><li>重启接口应用</li><li>通过<code>select pg_terminate_backend(pid)</code>杀死空闲连接</li><li>mybatis指定<code>#&#123;collectTime,jdbcType=TIMESTAMP&#125;</code></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><strong>参数类型避免与列类型不一致</strong>，在sql中显示声明传入的参数为<code>timestamp</code>类型，防止数据库发生对<code>collect_name</code>字段的隐式转换而导致索引失效.<br>反过来说，也可以通过对一些不够好的索引字段做函数操作而强制使用其他更好的索引字段，如<code>collect_name||&#39;&#39;=&#39;xxx&#39;</code>。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> tb</span><br><span class="line"><span class="keyword">where</span> tb.collect_name = <span class="string">&#x27;collect_name&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> tb.collect_time = <span class="string">&#x27;2022-02-02 00:00:00&#x27;</span>::<span class="type">timestamp</span>;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>解决过程中，通过查阅资料，其他数据库引擎也存在不同类型之间的隐式转换而导致索引失效的现象，如mysql(column=varchar,param=int)，可以使用下列sql查询转换对应类型。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> castsource::<span class="type">regtype</span>,casttarget::<span class="type">regtype</span>,castcontext,castfunc <span class="keyword">from</span> pg_cast</span><br><span class="line"><span class="comment">-- 其中 castcontext 值解释： i（隐式转换-Implicit），a（赋值转换-Assignment），e（显式转换-Explicit）</span></span><br><span class="line"><span class="comment">-- i &gt; a &gt; e</span></span><br></pre></td></tr></table></figure><p>postgres可以通过下列sql来在有索引时禁止全表扫描，但不推荐生产使用，除非你能确定影响范围是可接受的。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">role</span> xyh <span class="keyword">set</span> enable_seqscan = <span class="keyword">off</span></span><br></pre></td></tr></table></figure><p>此外, postgres和mysql都开始提供<code>hint</code>来更好的优化查询。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a name = "ref1" href="https://www.postgresql.org/docs/9.5/index.html">postgre 9.5</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgre in &amp; exist</title>
      <link href="//posts/648efea8/"/>
      <url>//posts/648efea8/</url>
      
        <content type="html"><![CDATA[<h1 id="postgre-in-amp-exist"><a href="#postgre-in-amp-exist" class="headerlink" title="postgre in &amp; exist"></a>postgre in &amp; exist</h1><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.postgresql.org/docs/9.5/index.html">postgres 9.5-doc</a> </li><li><a href="http://mysql.taobao.org/monthly/2018/11/06/">PgSQL · 最佳实践 · EXPLAIN 使用浅析</a></li><li><a href="https://pganalyze.com/docs/explain">Monitoring Postgres EXPLAIN plans</a></li><li><a href="https://www.cnblogs.com/flying-tiger/p/7885478.html">cache and dirties</a></li><li><a href="https://my.oschina.net/postgresqlchina/blog/5319063">PostgreSQL 分区表使用方法及技巧整理</a></li></ul><h2 id="in-amp-exist"><a href="#in-amp-exist" class="headerlink" title="in &amp; exist"></a>in &amp; exist</h2><blockquote><p>explain (analyze,buffers,verbose) select count(*) from test_tbl;</p></blockquote><p>in &amp; exist 在子查询的情况下执行逻辑与mysql类似，需斟酌内外表数据量级综合考虑，详情见<a href="source/_posts/1-%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql-in-exist.md">mysql</a>。</p><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><p>对于直接传入大量元素的情况下，postgresql提供values()转化成内存表做hash join提高效率</p><ul><li>直接使用in，不走连表优化逻辑，直接全表扫描table，效率很慢，table_a.length<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_a <span class="keyword">where</span> column_a <span class="keyword">in</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>, ...<span class="number">1000</span>+) </span><br><span class="line"></span><br><span class="line"># <span class="keyword">explain</span></span><br><span class="line">Seq Scan <span class="keyword">on</span> table_a  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.49</span><span class="number">.17</span> <span class="keyword">rows</span>=<span class="number">4</span> width=<span class="number">212</span>) (actual <span class="type">time</span>=<span class="number">0.565</span>.<span class="number">.0</span><span class="number">.565</span> <span class="keyword">rows</span>=<span class="number">0</span> loops=<span class="number">1</span>)</span><br><span class="line">&quot;  Filter: ((column_a)::text = ANY (&#x27;&#123;a,b,c&#125;&#x27;::text[]))&quot;</span><br><span class="line">  <span class="keyword">Rows</span> Removed <span class="keyword">by</span> <span class="keyword">Filter</span>: <span class="number">594</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>使用values()配合in/exists查询，values()会在内存生成一个临时表，比较内存中的 table_a.length*values.length 和数据库全表扫描 table_a.length 的执行时间斟酌使用<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">in</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_a <span class="keyword">where</span> column_a <span class="keyword">in</span> (<span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>),(<span class="string">&#x27;b&#x27;</span>), ...<span class="number">1000</span>+) </span><br><span class="line"></span><br><span class="line"># <span class="keyword">explain</span> <span class="keyword">in</span></span><br><span class="line">Hash Semi <span class="keyword">Join</span>  (<span class="keyword">cost</span>=<span class="number">0.08</span>.<span class="number">.48</span><span class="number">.64</span> <span class="keyword">rows</span>=<span class="number">6</span> width=<span class="number">212</span>) (actual <span class="type">time</span>=<span class="number">0.912</span>.<span class="number">.0</span><span class="number">.912</span> <span class="keyword">rows</span>=<span class="number">0</span> loops=<span class="number">1</span>)</span><br><span class="line">&quot;  Hash Cond: ((table_a.column_a)::text = &quot;&quot;*VALUES*&quot;&quot;.column1)&quot;</span><br><span class="line">  -&gt;  Seq Scan <span class="keyword">on</span> table_a  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.46</span><span class="number">.94</span> <span class="keyword">rows</span>=<span class="number">594</span> width=<span class="number">212</span>) (actual <span class="type">time</span>=<span class="number">0.030</span>.<span class="number">.0</span><span class="number">.671</span> <span class="keyword">rows</span>=<span class="number">594</span> loops=<span class="number">1</span>)</span><br><span class="line">  -&gt;  Hash  (<span class="keyword">cost</span>=<span class="number">0.04</span>.<span class="number">.0</span><span class="number">.04</span> <span class="keyword">rows</span>=<span class="number">3</span> width=<span class="number">32</span>) (actual <span class="type">time</span>=<span class="number">0.009</span>.<span class="number">.0</span><span class="number">.009</span> <span class="keyword">rows</span>=<span class="number">3</span> loops=<span class="number">1</span>)</span><br><span class="line">        Buckets: <span class="number">1024</span>  Batches: <span class="number">1</span>  Memory <span class="keyword">Usage</span>: <span class="number">1</span>kB</span><br><span class="line">&quot;        -&gt;  Values Scan on &quot;&quot;*VALUES*&quot;&quot;  (cost=0.00..0.04 rows=3 width=32) (actual time=0.004..0.006 rows=3 loops=1)&quot;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">exists</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">temp</span>(column_0) <span class="keyword">as</span> (<span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>),(<span class="string">&#x27;b&#x27;</span>), ...<span class="number">1000</span>+)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_a <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">temp</span> <span class="keyword">where</span> <span class="keyword">temp</span>.column_0 = table_a.column_a);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">explain</span> <span class="keyword">exists</span></span><br><span class="line">Hash Semi <span class="keyword">Join</span>  (<span class="keyword">cost</span>=<span class="number">0.14</span>.<span class="number">.48</span><span class="number">.70</span> <span class="keyword">rows</span>=<span class="number">6</span> width=<span class="number">212</span>) (actual <span class="type">time</span>=<span class="number">0.525</span>.<span class="number">.0</span><span class="number">.525</span> <span class="keyword">rows</span>=<span class="number">0</span> loops=<span class="number">1</span>)</span><br><span class="line">  Hash Cond: ((table_a.column_a)::<span class="type">text</span> = <span class="keyword">temp</span>.column_0)</span><br><span class="line">  CTE <span class="keyword">temp</span></span><br><span class="line">&quot;    -&gt;  Values Scan on &quot;&quot;*VALUES*&quot;&quot;  (cost=0.00..0.04 rows=3 width=32) (actual time=0.005..0.007 rows=3 loops=1)&quot;</span><br><span class="line">  -&gt;  Seq Scan <span class="keyword">on</span> table_a  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.46</span><span class="number">.94</span> <span class="keyword">rows</span>=<span class="number">594</span> width=<span class="number">212</span>) (actual <span class="type">time</span>=<span class="number">0.009</span>.<span class="number">.0</span><span class="number">.285</span> <span class="keyword">rows</span>=<span class="number">594</span> loops=<span class="number">1</span>)</span><br><span class="line">  -&gt;  Hash  (<span class="keyword">cost</span>=<span class="number">0.06</span>.<span class="number">.0</span><span class="number">.06</span> <span class="keyword">rows</span>=<span class="number">3</span> width=<span class="number">32</span>) (actual <span class="type">time</span>=<span class="number">0.017</span>.<span class="number">.0</span><span class="number">.017</span> <span class="keyword">rows</span>=<span class="number">3</span> loops=<span class="number">1</span>)</span><br><span class="line">        Buckets: <span class="number">1024</span>  Batches: <span class="number">1</span>  Memory <span class="keyword">Usage</span>: <span class="number">1</span>kB</span><br><span class="line">        -&gt;  CTE Scan <span class="keyword">on</span> <span class="keyword">temp</span>  (<span class="keyword">cost</span>=<span class="number">0.00</span>.<span class="number">.0</span><span class="number">.06</span> <span class="keyword">rows</span>=<span class="number">3</span> width=<span class="number">32</span>) (actual <span class="type">time</span>=<span class="number">0.011</span>.<span class="number">.0</span><span class="number">.015</span> <span class="keyword">rows</span>=<span class="number">3</span> loops=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="哪些查询可能会使用bitmap-index-scan"><a href="#哪些查询可能会使用bitmap-index-scan" class="headerlink" title="哪些查询可能会使用bitmap index scan"></a>哪些查询可能会使用bitmap index scan</h2><ul><li>btree 索引的多个组合查询</li></ul><p>不同列的 and\or 查询、 相同列的 or 查询</p><ul><li>brin 索引</li></ul><p>由于brin索引本身存储的就是一些连续块的元信息，所以本身就无法实现精确查询，所以通过brin查询时，首先也是构建heap page的bitmap串，（符合条件的为1，不符合条件的为0），然后根据这个bitmap串搜索tuple.</p><p>并在bitmap heap scan阶段 recheck 条件。</p><ul><li>gin 索引</li></ul><p>gin 索引存储的是KEY，以及ctid （heap行号）组成的posting list或posting tree，它理论上是可以支持index scan的，但是PostgreSQL目前仅对GIN实施了bitmap scan。</p><p>所以在使用gin索引时，首先也是构造heap page的bitmap串，（符合条件的为1，不符合条件的为0），然后根据这个bitmap串搜索tuple.</p><p>并在bitmap heap scan阶段 recheck 条件。这也是目前gin值得改进的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日期合法性的严格校验</title>
      <link href="//posts/feed7c16/"/>
      <url>//posts/feed7c16/</url>
      
        <content type="html"><![CDATA[<h1 id="Java日期合法性的严格校验"><a href="#Java日期合法性的严格校验" class="headerlink" title="Java日期合法性的严格校验"></a>Java日期合法性的严格校验</h1><ul><li><p>不推荐：<code>DateTimeFormatter.ofPattern()</code>，它不是严格的，其默认的校验模式是<code>ResolverStyle.SMART</code>，结果不确定性很强.</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate.parse(<span class="string">&quot;20210931&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2021-09-30</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>推荐：</p><ul><li><ol><li>选用类似<code>DateTimeFormatter.BASIC_ISO_DATE</code>已存在的格式，他们都是严格的;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate.parse(<span class="string">&quot;20210931&quot;</span>, DateTimeFormatter.BASIC_ISO_DATE)</span><br><span class="line"></span><br><span class="line"><span class="comment">//throw DateTimeParseException: </span></span><br><span class="line"><span class="comment">// Text &#x27;20210931&#x27; could not be parsed: Invalid date &#x27;SEPTEMBER 31&#x27;</span></span><br></pre></td></tr></table></figure></li><li><ol start="2"><li>若需自定义格式，请使用<code>ResolverStyle.STRICT</code>，其中年份请用uuuu .</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime.parse(<span class="string">&quot;202109312359&quot;</span>, DateTimeFormatter.ofPattern(<span class="string">&quot;uuuuMMddHHmm&quot;</span>).withResolverStyle(ResolverStyle.STRICT))</span><br><span class="line"></span><br><span class="line"><span class="comment">//throw DateTimeParseException: </span></span><br><span class="line"><span class="comment">// Text &#x27;202109312359&#x27; could not be parsed: Invalid date &#x27;SEPTEMBER 31&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8-Stream</title>
      <link href="//posts/266061db/"/>
      <url>//posts/266061db/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8-Stream-集合操作：中间方法和结束方法"><a href="#JAVA8-Stream-集合操作：中间方法和结束方法" class="headerlink" title="JAVA8 Stream 集合操作：中间方法和结束方法"></a>JAVA8 Stream 集合操作：中间方法和结束方法</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Stream 表示数据流，它没有数据结构，本身也不存储元素。作为一种操作数据的接口，它提供了过滤、排序、映射、规约等多种操作方法，共包含三个操作：</p><ul><li><p>初始化：略</p></li><li><p>中间操作：凡是返回 Stream 类型的方法，称之为中间操作。</p><ul><li>有状态操作-元素之间强依赖(<strong>sorted()、distinct()等</strong>)、无状态操作-流内元素之间不依赖(<strong>map()、peek()等</strong>)。</li><li>极度依赖于结束操作，当结束操作被调用时流才会流动，且执行是一种回溯过程。一条管道里的水流虽然宏观上是从上往下开始流，但微观上是最下面那部分的水最开始流动的，然后逐步带动上面的水依次往下流。</li></ul></li><li><p>结束操作：除中间操作外的所有操作，通常返回一个某种类型的值或直接消费流。分为短路操作（找到满足条件的元素就提前结束流）和非短路操作。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.无结束操作，不流动，无输出</span></span><br><span class="line">Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>).peek(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.有结束操作，且结束操作不是短路操作（阀门一直开启直到水流干），输出&quot;A&quot; &quot;B&quot; &quot;C&quot;</span></span><br><span class="line">Stream.of(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>).peek(System.out::println).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.有状态操作(如：max())，结果依赖于下一个元素，故每个元素都需要经过peek(), 输出2,3,1,3</span></span><br><span class="line">Stream.of(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>).peek(System.out::println).max(Integer::compare).ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.无状态操作(如：peek())，结果与其它元素无关，只与结束操作或后面的有状态操作有关(后面需要几个，它就最多处理几个)</span></span><br><span class="line">Stream.of(<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>).sorted(Integer::compare).peek(System.out::println).findFirst().ifPresent(System.out::println);<span class="comment">//输出4,4</span></span><br><span class="line">Stream.of(<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>).sorted(Integer::compare).peek(System.out::println).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.在无状态操作后加一个有状态操作，前者处理元素数取决于后则需要啥，输出4,5,6,6</span></span><br><span class="line">Stream.of(<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>).sorted(Integer::compare).peek(System.out::println).max(Integer::compare).ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json与bean之间的转换</title>
      <link href="//posts/7dfb604a/"/>
      <url>//posts/7dfb604a/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖-jackson-做-json-与-bean-之间的转换-lt-com-fasterxml-jackson-gt"><a href="#依赖-jackson-做-json-与-bean-之间的转换-lt-com-fasterxml-jackson-gt" class="headerlink" title="依赖 jackson 做 json 与 bean 之间的转换 &lt;com.fasterxml.jackson&gt;"></a>依赖 jackson 做 json 与 bean 之间的转换 &lt;com.fasterxml.jackson&gt;</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">com.fasterxml.jackson.databind.ObjectMapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JsonBeanUtil</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">JsonBeanUtil</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * jackson 对象和数据格式转换器</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>: null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * jsonToBean: 将json字符串转为javaBean</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>: json json格式字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>: cls 需转化的类对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jsonToBean</span><span class="params">(String json, Class&lt;T&gt; cls)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.readValue(json, cls);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * beanToJson: 将javaBean字符串转为json</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> json字符串</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> JsonProcessingException 对象转换json异常</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>: bean</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">beanToJson</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(bean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相应的注解为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生姓名 Sudent_NAME对应为json串中的属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JsonProperty</span>该注解为json中的属性名和bean中的属性名做了映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonProperty(value = &quot;Sudent_NAME&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonBeanUtilTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jsonToBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String jsonStr=<span class="string">&quot;&#123;\&quot;Sudent_NAME\&quot;:\&quot;xiaoming\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JsonBeanUtil.jsonToBean(jsonStr, Student.class);</span><br><span class="line">        assertEquals(<span class="string">&quot;xiaoming&quot;</span>,student.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beanToJson</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JsonBeanUtil.beanToJson(student);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相应的输出为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;Sudent_NAME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiaoming&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：不要与 fastjson&lt;com.alibaba.fastjson&gt;弄混<br>fastjson 的相关注解为<code>@JSONField(name = &quot;Sudent_NAME&quot;)</code><br>相关的转化方法为<code>JSONObject.parseObject(jsonStr, clazz);</code><br>==<em>不要将 jackson 与 fastjson 混用，他们识别不到对方的注解！</em>==</p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="//posts/de7c53fe/"/>
      <url>//posts/de7c53fe/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><blockquote><p>alibaba开发手册：</p><ul><li>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</li><li>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</li><li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</li></ul></blockquote><h2 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h2><p>//todo</p><h2 id="线程池变化规则"><a href="#线程池变化规则" class="headerlink" title="线程池变化规则"></a>线程池变化规则</h2><ol><li>threads &lt; corePoolSize ? Create thread until threads count equal to corePoolSize</li><li>activeThreads == corePoolSize ? ↓<ul><li>2.1 queuedTasks &lt; corePoolSize ? Push new task into queue</li><li>2.2 queuedTasks == corePoolSize ? ↓<ul><li>2.2.1 poolSize &lt; maxPoolSize ? Create as many threads as new tasks until equals to maxPoolSize</li><li>2.2.2 poolSize == maxPoolSize ? Handle new task with rejectedExecutionHandler such as CallerRunsPolicy etc.</li></ul></li></ul></li><li>threads &gt; corePoolSize ? Kill threads that are idle for more than keepAliveSeconds until threads count equal to corePoolSize</li></ol><p><a href="https://www.jianshu.com/p/94852bd1a283">https://www.jianshu.com/p/94852bd1a283</a><br><a href="https://www.cnblogs.com/wangjianbg/p/3445938.html">https://www.cnblogs.com/wangjianbg/p/3445938.html</a><br><a href="https://blog.csdn.net/u010648555/article/details/106137206/">https://blog.csdn.net/u010648555/article/details/106137206/</a></p><h1 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h1><p><a href="https://www.cnblogs.com/mic112/p/15424574.html">https://www.cnblogs.com/mic112/p/15424574.html</a><br><a href="https://blog.csdn.net/hunger_wang/article/details/108153703">https://blog.csdn.net/hunger_wang/article/details/108153703</a><br><a href="https://www.jianshu.com/p/ed825bf7e8ed">https://www.jianshu.com/p/ed825bf7e8ed</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给对象按自定义条件多层级分组</title>
      <link href="//posts/606281ea/"/>
      <url>//posts/606281ea/</url>
      
        <content type="html"><![CDATA[<h2 id="给对象按自定义条件多层级分组"><a href="#给对象按自定义条件多层级分组" class="headerlink" title="给对象按自定义条件多层级分组"></a>给对象按自定义条件多层级分组</h2><p><code>TextBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String mainText;</span><br><span class="line">    <span class="keyword">private</span> String srcText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>给定条件先后优先级</p><ul><li>条件一：<code>mainText</code>包含<code>substring1</code><ul><li>条件二：<code>mainText</code>包含<code>substring2</code><ul><li>条件三：<code>srcText</code>包含<code>substring3</code><ul><li>条件四：… …</li></ul></li></ul></li></ul></li></ul></li><li><p>确定条件的实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">findSubStringOne</span><span class="params">(TextBean textBean)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">substring1</span> <span class="operator">=</span> <span class="string">&quot;one&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (TextBean.contains(substring1)) &#123;</span><br><span class="line">        <span class="keyword">return</span> substring1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findSubStringTwo</span><span class="params">(TextBean textBean)</span> &#123;</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure></li><li><p>lambda 表达式分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TextBean&gt; textBeanList =  ... ... ;</span><br><span class="line">Map&lt;String, Map&lt;String, List&lt;TextBean&gt;&gt;&gt; map = textBeanList.stream().collect(Collectors.groupingBy(<span class="built_in">this</span>::findSubStringOne, Collectors.groupingBy(<span class="built_in">this</span>::findSubStringTwo)));</span><br></pre></td></tr></table></figure></li><li><p>分组后结构（两层）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── &quot;one&quot;</span><br><span class="line">│   └── &quot;two&quot;  ──  List<span class="tag">&lt;<span class="name">TextBean</span>&gt;</span></span><br><span class="line">│   └──     &quot; &quot;     ──  List<span class="tag">&lt;<span class="name">TextBean</span>&gt;</span></span><br><span class="line">├── &quot; &quot;</span><br><span class="line">│   └── &quot;two&quot;  ──  List<span class="tag">&lt;<span class="name">TextBean</span>&gt;</span></span><br><span class="line">│   └──     &quot; &quot;     ──  List<span class="tag">&lt;<span class="name">TextBean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圈复杂度及其优化方案</title>
      <link href="//posts/7c1b658c/"/>
      <url>//posts/7c1b658c/</url>
      
        <content type="html"><![CDATA[<h1 id="圈复杂度"><a href="#圈复杂度" class="headerlink" title="圈复杂度"></a>圈复杂度</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>圈复杂度（Cyclomatic complexity，CC）也称为条件复杂度，是一种衡量代码复杂度的标准，在1976年由Thomas J. McCabe, Sr. 提出，其符号为V(G)。</p><blockquote><p>麦凯布最早提出一种称为“基础路径测试”（Basis Path Testing）的软件测试方式，测试程序中的每一线性独立路径，所需的测试用例个数即为程序的圈复杂度。</p></blockquote><ul><li>圈复杂度可以用来衡量一个模块(程序的子程序、模块、方法或类别)判定结构的复杂程度，其数量上表现为独立路径的条数，也可理解为覆盖所有的可能情况最少使用的测试用例个数。</li><li>圈复杂度大说明程序代码可能质量低且难于测试和维护，根据经验，程序的可能错误和高的圈复杂度有着很大关系。从本质上讲，对于循环复杂度来说，数字越大越不好，数字越小越好。</li></ul><h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2 计算"></a>2 计算</h2><p><img src="/images/flow-graph.jpg" alt="flow-graph"></p><p>如果在控制流图中增加了一条从终点到起点的路径，整个流图形成了一个闭环。圈复杂度其实就是在这个闭环中线性独立回路的个数。</p><p><img src="/images/flow-graph1.png" alt="assets"></p><p>如图，线性独立回路有：</p><ul><li>e1→ e2 → e</li><li>e1 → e3 → e</li></ul><p>所以复杂度为2，对于简单的图，我们还可以数一数，但是对于复杂的图，这种方法就不是明智的选择了。</p><h3 id="2-1-点边计算法"><a href="#2-1-点边计算法" class="headerlink" title="2.1 点边计算法"></a>2.1 点边计算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">计算公式：V(G) = E - N + 2P</span><br><span class="line"></span><br><span class="line">E: 控制流图中边的数量（对应代码中顺序结构的部分）</span><br><span class="line">N: 控制流图中的判定节点数量，包括起点和终点（对应代码中的分支语句,所有终点只计算一次,即使有多个 return 或者 throw）</span><br><span class="line">P: 图的连接组件数目（图的组件数是相连节点的最大集合）,因为控制流图都是连通的，所以P为1.</span><br></pre></td></tr></table></figure><p><strong>几种常见的语句控制流图</strong></p><p><img src="/images/category.png" alt="assets"></p><p>一个例子:</p><p>code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">privite String <span class="title function_">test</span><span class="params">(<span class="type">int</span> index, String string)</span> &#123;</span><br><span class="line">       String returnString;</span><br><span class="line">       <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (string.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&#x27;分支1&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           returnString = <span class="string">&quot;returnString1&quot;</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (string.length() &lt; <span class="number">5</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">&#x27;分支2&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           returnString = <span class="string">&quot;returnString2&quot;</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span>  <span class="string">&#x27;分支3&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> returnString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flow-chart:</p><p><img src="/images/flow-chart.png" alt="assets"></p><p>flow-graph:</p><p><img src="/images/flow-graph3.png" alt="assets"></p><p>计算:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e（边）：9</span><br><span class="line">n（判定节点）：6</span><br><span class="line">p：1</span><br><span class="line">V = e - n + 2 * p = 5</span><br></pre></td></tr></table></figure><h3 id="2-2-节点判定法"><a href="#2-2-节点判定法" class="headerlink" title="2.2 节点判定法"></a>2.2 节点判定法</h3><p>圈复杂度的计算还有另外一种更直观的方法，因为圈复杂度所反映的是“判定条件”的数量，所以圈复杂度实际上就是等于判定节点的数量再加上1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算公式为：V(G) = P + 1</span><br></pre></td></tr></table></figure><p>其中 P 为判定节点数，常见的判定节点有：</p><ul><li>if 语句</li><li>while 语句</li><li>for 语句</li><li>case 语句</li><li>catch 语句</li><li>and 和 or 布尔操作</li><li>? : 三元运算符</li></ul><p>对于多分支的 case 结构或 if - else if - else 结构，统计判定节点的个数时需要特别注意：<strong>必须统计全部实际的判定节点数</strong>，也即每个 else if 语句，以及每个 case 语句，都应该算为一个判定节点。</p><h2 id="3-执行标准"><a href="#3-执行标准" class="headerlink" title="3 执行标准"></a>3 执行标准</h2><p>正如互联网行业中的许多指标一样，并没有适用于所有组织的精确的圈复杂度限制。不过，文献 <a href="http://www.mccabe.com/pdf/mccabe-nist235r.pdf">NIST235</a> 指出，以 <code>10</code> 为一个初始标准上限是一个不错的选择，尽管高达 <code>15</code> 的限制也有成功的案例，但更高的限制应该保留给那些愿意给更复杂的模块投入额外测试工作的项目：</p><blockquote><p>The precise number to use as a limit, however, remains somewhat controversial. The original limit of 10 as proposed by McCabe has significant supporting evidence, but limits as high as 15 have been used successfully as well. Limits over 10 should be reserved for projects that have several operational advantages over typical projects, for example experienced staff, formal design, a modern programming language, structured programming, code walkthroughs, and a comprehensive test plan. In other words, an organization can pick a complexity limit greater than 10, but only if it is sure it knows what it is doing and is willing to devote the additional testing effort required by more complex modules.</p></blockquote><table><thead><tr><th>圈复杂度</th><th>代码状况</th><th>可测性</th><th>维护性</th></tr></thead><tbody><tr><td>1~10</td><td>清晰</td><td>高</td><td>低</td></tr><tr><td>10~20</td><td>复杂</td><td>中</td><td>中</td></tr><tr><td>20~30</td><td>非常复杂</td><td>低</td><td>高</td></tr><tr><td>&gt; 30</td><td>不可读</td><td>不可测</td><td>非常高</td></tr></tbody></table><p>函数中的代码行数越多，出错的可能性就越大，这种观点有一些基本的道理。然而，当你把循环复杂度和代码行结合起来时，你就会对潜在的错误有一个更清晰的认识。正如 NASA 软件保证技术中心(<a href="https://citeseerx.ist.psu.edu/pdf/31e3f5732a7af3aecd364b6cc2a85d9495b5c159">SATC</a>)所描述的:</p><p>“ SATC 发现，最有效的评估方法是将规模和(圈复杂度)结合起来。复杂度高、体积大的模块可靠性最低。低大小和高复杂度的模块也是一个可靠性风险，因为它们往往是非常简洁的代码，很难改变或修改。”</p><blockquote><p>“The SATC has found the most effective evaluation is a combination of size and (Cyclomatic) complexity. The modules with both a high complexity and a large size tend to have the lowest reliability. Modules with low size and high complexity are also a reliability risk because they tend to be very terse code, which is difficult to change or modify.”</p></blockquote><h2 id="4-控制复杂度的重构技术"><a href="#4-控制复杂度的重构技术" class="headerlink" title="4 控制复杂度的重构技术"></a>4 控制复杂度的重构技术</h2><h3 id="4-1-Composing-Methods-重新组织你的函数"><a href="#4-1-Composing-Methods-重新组织你的函数" class="headerlink" title="4.1 Composing Methods(重新组织你的函数)"></a>4.1 Composing Methods(重新组织你的函数)</h3><ul><li>Extract Method(提炼函数) </li></ul><p>分为不同的step步骤进行处理，主干逻辑方法尽量控制在7个以内</p><p>例子：如果某段代码可以被组织在一起并独立出来</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span>(<span class="params"><span class="built_in">double</span> previousAmount</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">    Enumeration e = orders.elements();</span><br><span class="line">    <span class="built_in">double</span> outstanding = previousAmount * <span class="number">1.2</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 打印大标题</span></span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;**************************&quot;</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;***** Customer Owes ******&quot;</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;**************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算未完成的订单数量</span></span><br><span class="line">    <span class="keyword">while</span> (e.hasMoreElements()) </span><br><span class="line">    &#123;</span><br><span class="line">        Order each = (Order) e.nextElement();</span><br><span class="line">        outstanding += each.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印明细</span></span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;amount&quot;</span> + outstanding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这段代码放进一个独立函数中，并让函数名称解释该函数的用途</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span>(<span class="params"><span class="built_in">double</span> previousAmount</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printBanner();</span><br><span class="line">    <span class="built_in">double</span> outstanding = getOutstanding(previousAmount * <span class="number">1.2</span>);</span><br><span class="line">    printDetails(outstanding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBanner</span>() <span class="comment">//打印大标题</span></span></span><br><span class="line">&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;**************************&quot;</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;***** Customer Owes ******&quot;</span>);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;**************************&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算未完成的订单数量</span></span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">getOutstanding</span>(<span class="params"><span class="built_in">double</span> initialValue</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">double</span> result = initialValue;</span><br><span class="line">    Enumeration e = orders.elements();</span><br><span class="line">    <span class="keyword">while</span> (e.hasMoreElements()) </span><br><span class="line">    &#123;</span><br><span class="line">        Order each = (Order) e.nextElement();</span><br><span class="line">        result += each.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDetails</span> (<span class="params"><span class="built_in">double</span> outstanding</span>) <span class="comment">//打印明细</span></span></span><br><span class="line"> &#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line">    System.<span class="keyword">out</span>.println (<span class="string">&quot;amount&quot;</span> + outstanding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Substitute Algorithm(替换你的算法) </li></ul><p>将函数本体替换为另一个更清晰、简化的算法 ，如多值匹配</p><p>例子：把当前算法重构成更清晰的算法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foundPerson</span>(<span class="params">String[] people</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;Don&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Don&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;John&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;Kent&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Kent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构成更清晰的算法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> foundPerson(<span class="built_in">String</span>[] people) &#123;</span><br><span class="line">    <span class="built_in">List</span> candidates = Arrays.asList(<span class="keyword">new</span> <span class="built_in">String</span>[]&#123;<span class="string">&quot;Don&quot;</span>, <span class="string">&quot;John&quot;</span>,<span class="string">&quot;Kent&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;people.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (candidates.contains(people[i]))</span><br><span class="line">            <span class="keyword">return</span> people[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Simplifying-Conditional-Expressions-简化条件表达式"><a href="#4-2-Simplifying-Conditional-Expressions-简化条件表达式" class="headerlink" title="4.2 Simplifying Conditional Expressions(简化条件表达式)"></a>4.2 Simplifying Conditional Expressions(简化条件表达式)</h3><ul><li>Decompose Conditional(分解条件式)</li></ul><p>例子：你有一个复杂的条件语句</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (date.before (<span class="variable constant_">SUMMER_START</span>) |<span class="params"></span>| date.after(<span class="variable constant_">SUMMER_END</span>))</span><br><span class="line">    charge = quantity * winterRate + winterServiceCharge;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    charge = quantity * summerRate;</span><br></pre></td></tr></table></figure><p>从if、then、else三个段落中分别提炼出独立函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (notSummer(<span class="built_in">date</span>))</span><br><span class="line">    charge = winterCharge(quantity);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    charge = summerCharge (quantity);</span><br></pre></td></tr></table></figure><ul><li>Consolidate Conditional Expression(合并条件式) </li></ul><p>例子：你有一系列条件判断，都得到相同结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">double disabilityAmount() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (seniority &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (monthsDisabled &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isPartTime) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compute the disability amount</span></span><br></pre></td></tr></table></figure><p>将这些判断合并为一个条件式，并将这个条件式提炼成为一个独立函数，函数名自注释</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNotEligableForDisability</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compute the disability amount</span></span><br></pre></td></tr></table></figure><ul><li>Consolidate Duplicate Conditional Fragments(合并重复的条件片断) </li></ul><p>例子：在条件式的每个分支上有着相同的一段代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal()) </span><br><span class="line">    &#123;</span><br><span class="line">        total = price * 0.95;</span><br><span class="line">        send();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        total = price * 0.98;</span><br><span class="line">        send();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将这段重复代码搬移到条件式之外，避免用拷贝粘贴的方式写重复代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal())</span><br><span class="line">    total = price * 0.95;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    total = price * 0.98;</span><br><span class="line">send();</span><br></pre></td></tr></table></figure><ul><li>Remove Control Flag(移除控制标记) </li></ul><p>例子：当前代码使用标记变量，可读性差，容易出错</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkSecurity</span>(<span class="params">String[] people</span>)</span> &#123;</span><br><span class="line">    boolean found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! found) &#123;</span><br><span class="line">            <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;Don&quot;</span>))&#123;</span><br><span class="line">                sendAlert();</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;John&quot;</span>))&#123;</span><br><span class="line">                   sendAlert();</span><br><span class="line">                   found = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以break和return取代标记变量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkSecurity</span>(<span class="params">String[] people</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;     </span><br><span class="line">        <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;Don&quot;</span>))&#123;</span><br><span class="line">            sendAlert();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (people[i].<span class="keyword">equals</span> (<span class="string">&quot;John&quot;</span>))&#123;</span><br><span class="line">            sendAlert();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-Making-Method-Calls-Simpler-简化函数调用"><a href="#4-3-Making-Method-Calls-Simpler-简化函数调用" class="headerlink" title="4.3 Making Method Calls Simpler(简化函数调用)"></a>4.3 Making Method Calls Simpler(简化函数调用)</h3><ul><li>Separate Query from Modifier(将查询函数和修改函数分离) </li></ul><p>例子：某个函数既返回对象状态值，又修改对象状态，不符合单一职责原则</p><p><img src="/images/combine.webp" alt="assets"></p><p>建立两个不同的函数，其中一个负责查询，另一个负责修改</p><p><img src="/images/separate.webp" alt="assets"></p><ul><li>Parameterize Method(令函数携带参数) </li></ul><p>例子：若干函数做了类似的工作，但在函数本体中却包含了不同的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Dollars <span class="title">baseCharge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = Math.<span class="built_in">min</span>(<span class="built_in">lastUsage</span>(),<span class="number">100</span>) * <span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">lastUsage</span>() &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        result += (Math.<span class="built_in">min</span> (<span class="built_in">lastUsage</span>(),<span class="number">200</span>) - <span class="number">100</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">lastUsage</span>() &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        result += (<span class="built_in">lastUsage</span>() - <span class="number">200</span>) * <span class="number">0.07</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Dollars</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立单一函数，以参数表达那些不同的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Dollars <span class="title">baseCharge</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="built_in">usageInRange</span>(<span class="number">0</span>, <span class="number">100</span>) * <span class="number">0.03</span>;</span><br><span class="line">    result += <span class="built_in">usageInRange</span> (<span class="number">100</span>,<span class="number">200</span>) * <span class="number">0.05</span>;</span><br><span class="line">    result += <span class="built_in">usageInRange</span> (<span class="number">200</span>, Integer.MAX_VALUE) * <span class="number">0.07</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Dollars</span> (result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">usageInRange</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">lastUsage</span>() &gt; start) </span><br><span class="line">        <span class="keyword">return</span> Math.<span class="built_in">min</span>(<span class="built_in">lastUsage</span>(),end) -start;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>Replace Parameter with Explicit Methods(以明确函数取代参数) </li></ul><p>例如：你有一个函数，其中完全取决于参数值而采取不同的行为，那么就应该针对该参数的每一个可用值，建立一个独立函数，这样接口更加清楚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ENGINEER</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SALESMAN</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MANAGER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> Employee <span class="title function_">create</span><span class="params">(<span class="type">int</span> type)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> ENGINEER:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Engineer</span>();</span><br><span class="line">        <span class="keyword">case</span> SALESMAN:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Salesman</span>();</span><br><span class="line">        <span class="keyword">case</span> MANAGER:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后，提供对应的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> employee <span class="title function_">createEngineer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Engineer</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> employee <span class="title function_">createSalesman</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Salesman</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> employee <span class="title function_">createManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-面向对象特性"><a href="#4-4-面向对象特性" class="headerlink" title="4.4 面向对象特性"></a>4.4 面向对象特性</h3><ul><li>Replace Conditional with Polymorphism(以多态取代条件式) </li></ul><p>当出现大量类型检查和判断时，if else（或switch）语句的体积会比较臃肿，这无疑降低了代码的可读性。另外，if else（或switch）本身就是一个“变化点”，当需要扩展新的类型时，我们不得不追加if else（或switch）语句块，以及相应的逻辑，这无疑降低了程序的可扩展性，也违反了面向对象的开闭原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, String operator)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;add&quot;</span>.equals(operator)) &#123;</span><br><span class="line">        result = a + b;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;multiply&quot;</span>.equals(operator)) &#123;</span><br><span class="line">        result = a * b;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;divide&quot;</span>.equals(operator)) &#123;</span><br><span class="line">        result = a / b;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;subtract&quot;</span>.equals(operator)) &#123;</span><br><span class="line">        result = a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以考虑使用“多态”来代替冗长的条件判断，将if else（或switch）中的“变化点”封装到子类中。这样，就不需要使用if else（或switch）语句了，取而代之的是子类多态的实例，从而使得提高代码的可读性和可扩展性，很多设计模式使用都是这种套路，比如策略模式、状态模式。重构后代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Addition</span> <span class="keyword">implements</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, Operation&gt; operationMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        operationMap.put(<span class="string">&quot;add&quot;</span>, <span class="keyword">new</span> <span class="title class_">Addition</span>());</span><br><span class="line">        operationMap.put(<span class="string">&quot;divide&quot;</span>, <span class="keyword">new</span> <span class="title class_">Division</span>());</span><br><span class="line">        <span class="comment">// more operators</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title function_">getOperation</span><span class="params">(String operator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> operationMap.get(operator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, String operator)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (OperatorFactory .getOperation == <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid Operator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OperatorFactory .getOperation(operator).apply(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-检测工具"><a href="#5-检测工具" class="headerlink" title="5 检测工具"></a>5 检测工具</h2><h3 id="5-1-SonarQube-在线"><a href="#5-1-SonarQube-在线" class="headerlink" title="5.1 SonarQube(在线)"></a>5.1 SonarQube(在线)</h3><ul><li><a href="http://dcsonar.rd.x/">rterm-sonar</a></li></ul><p>社区表示，sonar提供的圈复杂度统计最小支持文件级别</p><p><img src="/images/sonar.png" alt="image-20221202102257639"></p><h3 id="5-2-MetricsReloaded-离线"><a href="#5-2-MetricsReloaded-离线" class="headerlink" title="5.2 MetricsReloaded(离线)"></a>5.2 MetricsReloaded(离线)</h3><p><img src="/images/MetricsReloaded.png" alt="image-20221201191808072"></p><ul><li><p>CogC 认知复杂度：其目的是显式地度量可理解性，随着每个控制结构的使用而增加，而且嵌套控制结构越多，认知复杂度就越高。</p></li><li><p>ev(G) 基本复杂度：是用来衡量程序非结构化程度的，非结构成分降低了程序的质量，增加了代码的维护难度，使程序难于理解。因此，基本复杂度高意味着非结构化程度高，难以模块化和维护。实际上，消除了一个错误有时会引起其他的错误。</p></li><li><p>iv(G) 模块设计复杂度：是用来衡量模块判定结构，即模块和其他模块的调用关系。软件模块设计复杂度高意味模块耦合度高，这将导致模块难于隔离、维护和复用。模块设计复杂度是从模块流程图中移去那些不包含调用子模块的判定和循环结构后得出的圈复杂度，因此模块设计复杂度不能大于圈复杂度，通常是远小于圈复杂度。</p></li><li><p><strong>v(G) 圈复杂度</strong>：本文所关注的指标。</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://baike.baidu.com/item/%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6/828737">圈复杂度_百度百科 (baidu.com)</a></li><li><a href="https://linearb.io/blog/cyclomatic-complexity/">Cyclomatic Complexity Defined Clearly, With Examples | LinearB</a></li><li><a href="https://www.jianshu.com/p/60d696f27f80">控制圈复杂度的9种重构技术</a></li><li><a href="https://learn.microsoft.com/en-us/visualstudio/code-quality/code-metrics-cyclomatic-complexity?view=vs-2022">Code metrics - Cyclomatic complexity - Visual Studio (Windows) | Microsoft Learn</a></li><li><a href="https://ww2.mathworks.cn/discovery/cyclomatic-complexity.html">Cyclomatic Complexity - MATLAB &amp; Simulink (mathworks.cn)</a></li><li><a href="https://www.ibm.com/docs/en/raa/6.1?topic=metrics-cyclomatic-complexity">Cyclomatic complexity - IBM Documentation</a></li><li>Watson, A. H., &amp; McCabe, T. J. (1996). Structured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric (NIST Special Publication 500-235). Retrieved May 14, 2011, from McCabe Software web site: <a href="http://www.mccabe.com/pdf/mccabe-nist235r.pdf">http://www.mccabe.com/pdf/mccabe-nist235r.pdf</a></li><li>Rosenberg, L., Hammer, T., Shaw, J. (1998). Software Metrics and Reliability (Proceedings of IEEE International Symposium on Software Reliability Engineering). Retrieved May 14, 2011, from Penn State University web site: <a href="https://citeseerx.ist.psu.edu/pdf/31e3f5732a7af3aecd364b6cc2a85d9495b5c159">https://citeseerx.ist.psu.edu/pdf/31e3f5732a7af3aecd364b6cc2a85d9495b5c159</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务监控方案调研</title>
      <link href="//posts/f7a2b51a/"/>
      <url>//posts/f7a2b51a/</url>
      
        <content type="html"><![CDATA[<h1 id="监控方案"><a href="#监控方案" class="headerlink" title="监控方案"></a>监控方案</h1><ul><li>白盒监控：通过白盒能够了解其内部的实际运行状态，通过对监控指标的的观察能够预判可能出现的问题，从而对潜在的不确定因素进行优化。</li><li>黑盒监控：HTTP探针，TCP探针等，可以在系统或者服务在发生故障时能够快速通知相关的人员进行处理。</li></ul><h2 id="监控目标"><a href="#监控目标" class="headerlink" title="监控目标"></a>监控目标</h2><ul><li>长期趋势分析：通过持续的收集和统计监控样本数据，对监控指标进行长期趋势分析及预测</li><li>对照分析：版本之间的指标对照，及时跟踪系统信息</li><li>告警：当出现或即将出现故障时，监控系统需要迅速反应并通知干系人，从而快速应对和预防问题发生</li><li>故障分析和定位：故障发生后，通过对比不同监控数据和历史数据的分析，能够找到并解决根源问题</li><li>数据可视化：可视化仪表盘直接获取系统运行信息</li></ul><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://prometheus.io/assets/architecture.png" alt="官方架构图"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>pull over http：网络不支持pull时推送入PushGateway中转</li><li>自带TSDB本地存储，不依赖于网络存储或其他远程服务，含数据过期策略，若需要持久化数据，也可支持远程读写(如：influx—db)</li><li>支持服务发现或静态配置</li><li>外置告警模块</li></ul><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>如果PushGateway开启了持久化，当某个监控数据不再需要，则只有手动删除才生效，否则仍然采集的为旧值，推荐应用结束时删除监控数据</li><li>PushGateway持久化没有过期策略，不定期清理容易到达存储上限</li><li>虽然可以自定义数据汇报，比如每个请求的耗时，但prometheus重视可靠性，不保证准确性，官方不推荐做精细的监控</li></ul><blockquote><p>如果系统在每小时崩溃1ms，那么它的可用性就超过99.9999%，但是它还是高度不可靠。与之类似，如果一个系统从来不崩溃，但是每年要停机两星期，那么它是高度可靠的，但是可用性只有96%。</p></blockquote><h2 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring-Boot-Admin"></a><a href="https://codecentric.github.io/spring-boot-admin/">Spring-Boot-Admin</a></h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>易扩展：@Endpoint创建自定义端点，完美适配spring生态</li><li>支持服务发现或静态配置</li><li>内置告警模块</li><li>可以监控JVM的各类环境变量</li></ul><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ul><li>监控数据存于内存，决定了其只能查看短期内数据</li><li>虽然可以创建自定义端点，但由于仍然是定频拉取数据，所以难以做到每个请求耗时这类的精细监控</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th></th><th>spring-boot-admin</th><th>Prometheus</th></tr></thead><tbody><tr><td>时效性</td><td>内存只保留短期数据，不利于做长期的趋势分析</td><td>自带时序数据库，天生的适合做长期趋势分析，并且自带PromQL</td></tr><tr><td>数据存储</td><td>基于内存存储，重启后监控数据(服务状态变更记录等)全部丢失，无法恢复</td><td>默认本地存储，也可支持远程存储做数据持久化</td></tr><tr><td>告警</td><td>内置邮件告警，易扩展</td><td>周期性计算告警策略，生成告警信息，由外部组件AlertManager负责通知</td></tr></tbody></table><p><em>最终方案</em></p><ul><li><a href="https://yunlzheng.gitbook.io/prometheus-book/part-iii-prometheus-shi-zhan/readmd">Prometheus</a> + Grafana [+AlertManager] 监控JVM、CPU和磁盘等基础数据</li><li>FileBeat + ElasticSearch + Grafana 收集每次请求耗时和请求参数</li><li>链路追踪方案：<a href="https://zhuanlan.zhihu.com/p/60436915">SkyWalking vs Pinpoint vs Cat vs zipkin</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建应用</title>
      <link href="//posts/2fbc7803/"/>
      <url>//posts/2fbc7803/</url>
      
        <content type="html"><![CDATA[<h1 id="postgres数据库"><a href="#postgres数据库" class="headerlink" title="postgres数据库"></a>postgres数据库</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:10.20</span><br><span class="line">docker run -d -it -p 5432:5432 --name postgres -e POSTGRES_PASSWORD=postgres -e ALLOW_IP_RANGE=0.0.0.0/0 -v C:\opt\postgres\data:/var/lib/postgresql/data postgres:10.20 /bin/bash</span><br><span class="line">docker exec -it postgres /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务没起</span></span><br><span class="line">postgres@3a6d585efca4:/$ psql</span><br><span class="line">  psql: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: No such file or directory</span><br><span class="line">        Is the server running locally and accepting connections on that socket?</span><br><span class="line"></span><br><span class="line">root@3a6d585efca4:/# service --status-all</span><br><span class="line"> [ ? ]  hwclock.sh</span><br><span class="line"> [ - ]  postgresql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">集群没启动，意味着容器重启后postgres将不会重启！</span></span><br><span class="line">root@3a6d585efca4:/# service postgresql --full-restart</span><br><span class="line">[warn] No PostgreSQL clusters exist; see &quot;man pg_createcluster&quot; ... (warning).</span><br><span class="line">[warn] No PostgreSQL clusters exist; see &quot;man pg_createcluster&quot; ... (warning).</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以直接启动集群：https://www.codenong.com/48552861/，也可以如下创建一个新集群！</span></span><br><span class="line">root@3a6d585efca4:/# pg_createcluster 10 main --start</span><br><span class="line">Creating new PostgreSQL cluster 10/main ...</span><br><span class="line">/usr/lib/postgresql/10/bin/initdb -D /var/lib/postgresql/10/main --auth-local peer --auth-host md5</span><br><span class="line">The files belonging to this database system will be owned by user &quot;postgres&quot;.</span><br><span class="line">This user must also own the server process.</span><br><span class="line">The database cluster will be initialized with locale &quot;en_US.utf8&quot;.</span><br><span class="line">The default database encoding has accordingly been set to &quot;UTF8&quot;.</span><br><span class="line">The default text search configuration will be set to &quot;english&quot;.</span><br><span class="line">Data page checksums are disabled.</span><br><span class="line">fixing permissions on existing directory /var/lib/postgresql/10/main ... ok</span><br><span class="line">creating subdirectories ... ok</span><br><span class="line">selecting default max_connections ... 100</span><br><span class="line">selecting default shared_buffers ... 128MB</span><br><span class="line">selecting default timezone ... Etc/UTC</span><br><span class="line">selecting dynamic shared memory implementation ... posix</span><br><span class="line">creating configuration files ... ok</span><br><span class="line">running bootstrap script ... ok</span><br><span class="line">performing post-bootstrap initialization ... ok</span><br><span class="line">syncing data to disk ... ok</span><br><span class="line">Success. You can now start the database server using:</span><br><span class="line"></span><br><span class="line">    pg_ctlcluster 10 main start</span><br><span class="line"></span><br><span class="line">Ver Cluster Port Status Owner    Data directory              Log file</span><br><span class="line">10  main    5432 online postgres /var/lib/postgresql/10/main /var/log/postgresql/postgresql-10-main.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程连接不上，no pg_hba.conf entry <span class="keyword">for</span> host <span class="string">&#x27;ip地址&#x27;</span> ，user “****”，database <span class="string">&quot;*****&quot;</span>，SSL ON</span></span><br><span class="line">postgres@3a6d585efca4:/$ echo &quot;host    all             all              0.0.0.0/0              md5&quot; &gt;&gt; /etc/postgresql/10/main/pg_hba.conf</span><br><span class="line">root@3a6d585efca4:/# service postgresql --full-restart</span><br><span class="line">[ ok ] Stopping PostgreSQL 10 database server: main.</span><br><span class="line">[ ok ] Starting PostgreSQL 10 database server: main.</span><br></pre></td></tr></table></figure><h1 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 -v usr:/usr -v etc:/etc -v var:/var --restart always --name grafana grafana/grafana:6.7.3</span><br></pre></td></tr></table></figure><h1 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8086:8086 --restart always --name influxdb influxdb:1.7.9</span><br><span class="line">docker exec -it influxdb /bin/bash</span><br><span class="line">./usr/bin/influx</span><br><span class="line">create user root with password &#x27;root&#x27; with all privileges</span><br><span class="line">create database telegraf</span><br></pre></td></tr></table></figure><h1 id="telegraf"><a href="#telegraf" class="headerlink" title="telegraf"></a>telegraf</h1><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">来个配置文件</span></span><br><span class="line">docker run --rm telegraf:1.13.4 telegraf config &gt; telegraf.conf</span><br><span class="line">docker run --rm telegraf:1.13.4-alpine telegraf --input-filter cpu:mem:disk:system:docker:http_response --output-filter kafka config &gt; telegraf.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改好后挂载进去</span></span><br><span class="line">docker run -d --restart always --name telegraf -v /opt/app/conf/telegraf.conf:/etc/telegraf/telegraf.conf -e HOST=127.0.0.1 telegraf:1.13.4-alpine</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建应用</title>
      <link href="//posts/2fbc7803/"/>
      <url>//posts/2fbc7803/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-数据卷挂载的文件权限问题"><a href="#Docker-数据卷挂载的文件权限问题" class="headerlink" title="Docker 数据卷挂载的文件权限问题"></a>Docker 数据卷挂载的文件权限问题</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://zhuanlan.zhihu.com/p/151915585">为什么你应该在docker 中使用gosu？</a></li><li>[2] <a href="https://www.jianshu.com/p/83d787d50b61">解决 Docker 数据卷挂载的文件权限问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate</title>
      <link href="//posts/31133678/"/>
      <url>//posts/31133678/</url>
      
        <content type="html"><![CDATA[<h1 id="restTemplate编码问题"><a href="#restTemplate编码问题" class="headerlink" title="restTemplate编码问题"></a>restTemplate编码问题</h1><h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h2><p>项目对外请求(Get)一个短信接口，短信内容通过用户传入，服务器端处理为UTF-8。通过restTemplate请求该接口后响应正常，但手机端接受到的短信内容中文乱码。</p><p>困扰：接口由第三方提供，没有调用文档，不知道是否是接收方对短信内容做了再编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> MessageFormat.format(SMS_URI, urlPrefix, username, password, phone, content);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> RestTemplateHelper.getInstance().getForEntity(url, String.class);</span><br></pre></td></tr></table></figure><h2 id="2-字节编码"><a href="#2-字节编码" class="headerlink" title="2. 字节编码"></a>2. 字节编码</h2><p>查询得知Android手机使用ASCII编码，尝试用ASCII对短信内容再编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = content.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">content = <span class="keyword">new</span> <span class="title class_">String</span>(bytes, StandardCharsets.US_ASCII);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> MessageFormat.format(SMS_URI, urlPrefix, username, password, phone, content);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> RestTemplateHelper.getInstance().getForEntity(url, String.class);</span><br></pre></td></tr></table></figure><p>结果：仍然中文乱码</p><h2 id="3-URL编码"><a href="#3-URL编码" class="headerlink" title="3. URL编码"></a>3. URL编码</h2><p>大费周章找到三方接口方提供文档，文档说明需用URLEncoder编码短信内容, 编码格式GBK</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> MessageFormat.format(SMS_URI, urlPrefix, username, password, phone, URLEncoder.encode(content, <span class="string">&quot;GBK&quot;</span>))</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> RestTemplateHelper.getInstance().getForEntity(url, String.class);;</span><br></pre></td></tr></table></figure><p>结果：短信收到编码后的内容，经URLDecoder解码成功。 尝试使用HTTPClient和okHttp，收到的短信内容中文都正常，使用restTemplate出问题，跟进源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> MessageFormat.format(SMS_URI, urlPrefix, username, password, phone, URLEncoder.encode(content, <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> RestTemplateHelper.getInstance().getForEntity(URI.create(url), String.class);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">RequestCallback</span> <span class="variable">requestCallback</span> <span class="operator">=</span> acceptHeaderRequestCallback(responseType);</span><br><span class="line">ResponseExtractor&lt;ResponseEntity&lt;T&gt;&gt; responseExtractor = responseEntityExtractor(responseType);</span><br><span class="line"><span class="keyword">return</span> nonNull(execute(url, HttpMethod.GET, requestCallback, responseExtractor, uriVariables));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException &#123;</span><br><span class="line"><span class="comment">// 使用默认的编码器对URL编码</span></span><br><span class="line"><span class="type">URI</span> <span class="variable">expanded</span> <span class="operator">=</span> getUriTemplateHandler().expand(url, uriVariables);</span><br><span class="line"><span class="keyword">return</span> doExecute(expanded, method, requestCallback, responseExtractor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入的url是String类型时，restTemplate对url会做一次编码，导致中文部分做了二次编码，使用另一个方法直接传入URI可以跳过编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">getForEntity</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException &#123;</span><br><span class="line"><span class="type">RequestCallback</span> <span class="variable">requestCallback</span> <span class="operator">=</span> acceptHeaderRequestCallback(responseType);</span><br><span class="line">ResponseExtractor&lt;ResponseEntity&lt;T&gt;&gt; responseExtractor = responseEntityExtractor(responseType);</span><br><span class="line"><span class="keyword">return</span> nonNull(execute(url, HttpMethod.GET, requestCallback, responseExtractor));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(URI url, HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class="keyword">throws</span> RestClientException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> doExecute(url, method, requestCallback, responseExtractor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-题外话"><a href="#4-题外话" class="headerlink" title="4. 题外话"></a>4. 题外话</h2><p>Spring遵循RFC 3986规范，某些特殊字符<code>&amp;</code>，<code>+</code>等等会被视为分隔符，不参与编码，若参数内容包含这些特殊字符，使用restTemplate编码发送请求会造成参数部分丢失情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//domain?title=abc&amp;d</span></span><br><span class="line">expect: [key=title, value=abc&amp;d]</span><br><span class="line">but：   [key=title, value=abc] [d]</span><br></pre></td></tr></table></figure><p><img src="/images/C282B86B-5A80-4932-BB81-FE25152E4E77.png" alt="issue"></p><p><a href="https://github.com/spring-projects/spring-framework/issues/22153">https://github.com/spring-projects/spring-framework/issues/22153</a></p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p>使用RestTemplate时慎重考虑url是否含特殊字符，若是如此，请手动构建URI对象传入，不要使用RestTemplate默认的编码器。</p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autowired&amp;Resource&amp;Inject</title>
      <link href="//posts/af497120/"/>
      <url>//posts/af497120/</url>
      
        <content type="html"><![CDATA[<h1 id="Autowired-Resource-Inject"><a href="#Autowired-Resource-Inject" class="headerlink" title="@Autowired @Resource @Inject"></a>@Autowired @Resource @Inject</h1><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><table><thead><tr><th>Annotaion</th><th>Package</th><th>Source</th></tr></thead><tbody><tr><td>@Autowired</td><td>org.springframework.bean.factory</td><td>Spring 2.5+</td></tr><tr><td>@Resource</td><td>javax.annotation</td><td>Java JSR-250</td></tr><tr><td>@Inject</td><td>javax.inject</td><td>Java JSR-330</td></tr></tbody></table><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> XService xservice;</span><br></pre></td></tr></table></figure><ul><li>默认: byType (接口注入实现类)</li><li>byName: byType不能确定唯一Bean时</li><li>异常: byName + byName均不能确定唯一Bean</li><li>推荐: @Autowired+@Qualifier(“beanName”)</li></ul><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> XService xservice;</span><br></pre></td></tr></table></figure><ul><li>默认: byName</li><li>byType: byName不能确定唯一Bean时</li><li>异常: byType + byName均不能确定唯一Bean</li><li>推荐: @Resource(name=”beanName”) or @Resource(type=XServiceImpl.class)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logstash-plugin</title>
      <link href="//posts/663d8f77/"/>
      <url>//posts/663d8f77/</url>
      
        <content type="html"><![CDATA[<h1 id="logstash-plugin"><a href="#logstash-plugin" class="headerlink" title="logstash-plugin"></a>logstash-plugin</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> docker.elastic.co/logstash/logstash:<span class="number">7.5</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> klong</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> plugins &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> $<span class="string">&#x27;#!/bin/bash\n\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">    bin/logstash-plugin install $1 &amp;&amp; bin/logstash-plugin prepare-offline-pack --output=/plugins/$1.zip $1 \n&#x27;</span> &gt; install-then-pack-plugin.sh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> +x install-then-pack-plugin.sh</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/usr/share/logstash/plugins&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;./install-then-pack-plugin.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;logstash-output-influxdb&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>docker build -t logstash-plugins:latest -f Dockerfile .<br>docker image prune<br>docker run –rm -v C:\user\desktop:/usr/share/logstash/plugins logstash-plugins logstash-output-influxdb</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./logstash-plugin list --group input</span><br><span class="line"></span><br><span class="line">logstash-input-beats</span><br><span class="line">logstash-input-elasticsearch</span><br><span class="line">logstash-input-exec</span><br><span class="line">logstash-input-file</span><br><span class="line">logstash-input-graphite</span><br><span class="line">logstash-input-heartbeat</span><br><span class="line">logstash-input-http</span><br><span class="line">logstash-input-http_poller</span><br><span class="line">logstash-input-jdbc</span><br><span class="line">logstash-input-kafka</span><br><span class="line">logstash-input-pipe</span><br><span class="line">logstash-input-rabbitmq</span><br></pre></td></tr></table></figure><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="online"><a href="#online" class="headerlink" title="online"></a>online</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./logstash-plugin install logstash-output-influxdb</span><br></pre></td></tr></table></figure><h3 id="offline"><a href="#offline" class="headerlink" title="offline"></a>offline</h3><ul><li>failed-1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># download gem-file for plugin from https://rubygems.org/gems/logstash-output-influxdb/versions/5.0.6</span><br><span class="line">$ ./logstash-plugin install logstash-output-influxdb-5.0.6.gem</span><br><span class="line"></span><br><span class="line">Validating logstash-output-influxdb-5.0.6.gem</span><br><span class="line">Installing logstash-output-influxdb</span><br><span class="line">Error Bundler::HTTPError, retrying 1/10</span><br><span class="line">Could not fetch specs from https://rubygems.org/</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>failed-2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># download tar.gz-file from https://github.com/logstash-plugins/logstash-output-influxdb/tags</span><br><span class="line">$ cd /opt/app/logstash-6.8.0/vendor/bundle/jruby/2.5.0/gems</span><br><span class="line">$ tar -zxvf logstash-output-influxdb-5.0.6.tar.gz</span><br><span class="line">$ vim /opt/app/logstash-6.8.0/Gemfile</span><br><span class="line"># gem &quot;logstash-output-influxdb&quot;, &quot;5.0.6&quot;, :path =&gt; &quot;/opt/app/logstash-6.8.0/vendor/bundle/jruby/2.5.0/gems/logstash-output-influxdb-5.0.6&quot;</span><br><span class="line">$ ./opt/app/logstash-6.8.0/bin/logstash-plugin install --no-verify</span><br><span class="line"></span><br><span class="line">Installing...</span><br><span class="line">Error Bundler::HTTPError, retrying 1/10</span><br><span class="line">Could not fetch specs from https://rubygems.org/</span><br></pre></td></tr></table></figure><ul><li>success-3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># switch to device with network</span><br><span class="line">$ ./bin/logstash-plugin install logstash-output-influxdb</span><br><span class="line">$ ./bin/logstash-plugin prepare-offline-pack logstash-output-influxdb</span><br><span class="line"></span><br><span class="line"># switch to offline device</span><br><span class="line">$ ./bin/logstash-plugin install file:///opt/app/logstash-output-plugins-6.8.0.zip</span><br><span class="line"></span><br><span class="line">Installing file: /opt/app/logstash-6.8.0/bin/logstash-output-plugins-6.8.0.zip</span><br><span class="line">Install successful</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gzip实施方案</title>
      <link href="//posts/8c1fd981/"/>
      <url>//posts/8c1fd981/</url>
      
        <content type="html"><![CDATA[<h1 id="gzip-实施文档"><a href="#gzip-实施文档" class="headerlink" title="gzip 实施文档"></a>gzip 实施文档</h1><blockquote><p>gzip：HTTP 内容编码的一种方式，利用 deflate 算法从内容中找出类似的字符串， 并临时替换他们，使整个文件变小，默认且目前仅使用 deflate 算法压缩 data 部分。</p></blockquote><h2 id="1-必要条件"><a href="#1-必要条件" class="headerlink" title="1. 必要条件"></a>1. 必要条件</h2><p>请求头内<code>Accept-encoding：gzip</code></p><h2 id="2-实施细节"><a href="#2-实施细节" class="headerlink" title="2. 实施细节"></a>2. 实施细节</h2><ul><li><p>Apache(无法指定开始压缩的阈值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># httpd.conf</span><br><span class="line"></span><br><span class="line"># 压缩模块，对代码进行压缩。</span><br><span class="line">LoadModule deflate_module modules/mod_deflate.so</span><br><span class="line"># 指令，相当于告诉浏览器这个页面进行了压缩，如果不开启这个，那网站就不能正常显示了。</span><br><span class="line">LoadModule headers_module modules/mod_headers.so</span><br><span class="line"># 启用对http的缓存，要不要开启这个随便自己选择。</span><br><span class="line">LoadModule expires_module modules/mod_expires.so</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_deflate.c&gt;</span><br><span class="line"> # 必须的，就像一个开关一样，告诉apache对传输到浏览器的内容进行压缩</span><br><span class="line"> SetOutputFilter DEFLATE</span><br><span class="line"> # 压缩率(1-9，9最高), 6是建议值.</span><br><span class="line"> DeflateCompressionLevel 6</span><br><span class="line"> # 压缩缓冲区大小，当data大于该值时，httpd将切换到chunked(分组)编码(Transfer-Encoding设置为chunked)</span><br><span class="line"> # DeflateBufferSize 8096</span><br><span class="line"> # 不压缩指定后缀的文件</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</span><br><span class="line"> # 压缩指定后缀的文件</span><br><span class="line"> AddOutputFilterByType DEFLATE text/*</span><br><span class="line"> AddOutputFilterByType DEFLATE application/json application/xml application/javascript</span><br><span class="line"> AddOutputFilterByType DEFLATE application/x-httpd-php application/x-httpd-fastphp</span><br><span class="line"> # 部分版本浏览器对压缩支持的不是很好，不开启或仅开启部分压缩</span><br><span class="line"> BrowserMatch ^Mozilla/4 gzip-only-text/html # Netscape 4.x 有一些问题，所以只压缩文件类型是text/html的</span><br><span class="line"> BrowserMatch ^Mozilla/4.0[678] no-gzip # Netscape 4.06-4.08 有更多的问题，所以不开启压缩</span><br><span class="line"> BrowserMatch \bMSIE !no-gzip !gzip-only-text/html # IE浏览器会伪装成 Netscape ，但是事实上它没有问题</span><br><span class="line"> Header append Vary User-Agent env=!dont-vary #确保代理不会发送错误的内容</span><br><span class="line"> &lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 若启用http缓存，也就是上面说到的mod_expires.so模块，需加入下述配置。</span><br><span class="line">&lt;IfModule mod_expires.c&gt;</span><br><span class="line"> ExpiresActive On # 激活http缓存，也就是个开关，必须有的一段代码</span><br><span class="line"> ExpiresDefault A604800 # 默认缓存时间为604800秒，也就是7天，A表示以客户端时间为准</span><br><span class="line"> ExpiresByType text/css A3600 # 对css文件缓存3600秒，也就是1小时，A表示以客户端时间为准</span><br><span class="line"> ExpiresByType text/html A3600 #对 html文件缓存3600秒，也就是1小时，A表示以客户端时间为准</span><br><span class="line"> ExpiresByType application/x-javascript A3600 # 对javascript文件缓存3600秒，也就是1小时，A表示以客户端时间为准</span><br><span class="line"> ExpiresByType image/gif “access plus 2 month” # 对gif图片缓存2个月，以客户端时间为准</span><br><span class="line"> ExpiresByType image/jpeg “access plus 2 month” # 对jpeg和jpg图片缓存2个月，以客户端时间为准</span><br><span class="line"> ExpiresByType image/png “access plus 2 month” # 对png图片缓存2个月，以客户端时间为准</span><br><span class="line"> ExpiresByType image/x-icon “access plus 2 month” # 对浏览器小图标缓存2个月，以客户端时间为准</span><br><span class="line"> ExpiresByType application/x-shockwave-flash A2592000 # 对flash文件缓存2592000秒，也就是1个月，A表示以客户端时间为准</span><br><span class="line"> #特别注意也可以使用 ExpiresByType text/css M3600  这里的M表示以文件最后修改时间为准缓存1小时，例如有些时候，我们的HTML是大批量定时更新的，这个时候就可以用到M</span><br><span class="line"> Header unset Pragma # 删除掉http头信息中的Pragma，pragma也是控制浏览器缓存的，不过是用于http1.0标准</span><br><span class="line"> FileETag None  # 不使用http1.1标准中的ETag属性</span><br><span class="line"> Header unset ETag # 不使用http1.1标准中的ETag属性</span><br><span class="line"> &lt;FilesMatch “\.(js|css|ico|pdf|flv|jpg|jpeg|png|gif|mp3|mp4|swf)$”&gt; #针对js|css|ico等后缀的文件进行单独设置</span><br><span class="line"> #Header set Expires “Thu, 15 Apr 2013 20:00:00 GMT”</span><br><span class="line"> Header unset Last-Modified #不使用http头信息中的Last-Modified属性，Last-Modified是指文件最后修改时间</span><br><span class="line"> Header append Cache-Control “public” #设置为可被任何缓存区缓存</span><br><span class="line"> &lt;/FilesMatch&gt;</span><br><span class="line"> &lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><ul><li><p>目前测试环境使用的为基础配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># httpd-deflate.conf</span><br><span class="line">&lt;IfModule mod_deflate.c&gt;</span><br><span class="line"> # 必须的，就像一个开关一样，告诉apache对传输到浏览器的内容进行压缩</span><br><span class="line"> SetOutputFilter DEFLATE</span><br><span class="line"> # 压缩率(1-9，9最高), 6是建议值.</span><br><span class="line"> DeflateCompressionLevel 6</span><br><span class="line"> # 压缩缓冲区大小，当data大于该值时，httpd将切换到chunked(分组)编码(Transfer-Encoding设置为chunked)，一边压缩一边发送，副作用是不设置任何Content-Length，将会对需要Content-Length的一些功能有影响。</span><br><span class="line"> # DeflateBufferSize 8096</span><br><span class="line"> # 不压缩指定后缀的文件</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary</span><br><span class="line"> SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</span><br><span class="line"> # 压缩指定后缀的文件</span><br><span class="line"> AddOutputFilterByType DEFLATE text/*</span><br><span class="line"> AddOutputFilterByType DEFLATE application/json,application/javascript</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>外置 Tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- server.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">compression</span>=<span class="string">&quot;on&quot;</span> <span class="attr">compressionMinSize</span>=<span class="string">&quot;2048&quot;</span>  <span class="attr">compressableMimeType</span>=<span class="string">&quot;application/json&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line"></span><br><span class="line"># 开启gzip压缩功能</span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line"># 设置允许压缩的页面最小字节数; 这里表示如果文件小于10k，就不用压缩，因为没有意义，本来就很小.</span><br><span class="line">gzip_min_length 10k;</span><br><span class="line"></span><br><span class="line"># 设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line"></span><br><span class="line"># 压缩版本</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line"># 设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快; 这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6</span><br><span class="line">gzip_comp_level 2;</span><br><span class="line"></span><br><span class="line"># 制定压缩的类型,线上配置时尽可能配置多的压缩类型!</span><br><span class="line">gzip types text/css text/xml application/javascript;</span><br><span class="line"></span><br><span class="line"># 配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line"># 选择支持vary header, 可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩</span><br><span class="line">gzip vary on;</span><br></pre></td></tr></table></figure></li><li><p>Spring-Boot</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">excluded-user-agents:</span> <span class="string">Mozilla/4</span> <span class="comment"># 对于部分浏览器禁用压缩功能</span></span><br><span class="line">    <span class="attr">mime-types:</span> <span class="string">text/plain,application/json</span> <span class="comment"># text/css,text/javascript,application/javascript,text/html,text/xml</span></span><br><span class="line">    <span class="attr">min-response-size:</span> <span class="number">4096</span> <span class="comment">#byte, 小于4k不压缩, 当接口返回对象时，此属性无效</span></span><br></pre></td></tr></table></figure></li><li><p>Feign</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置请求 GZIP 压缩</span></span><br><span class="line"><span class="attr">feign.compression.request.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置响应 GZIP 压缩</span></span><br><span class="line"><span class="attr">feign.compression.response.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置压缩支持的 MIME TYPE</span></span><br><span class="line"><span class="attr">feign.compression.request.mime-types</span>=<span class="string">text/xml,application/xml,application/json</span></span><br><span class="line"><span class="comment"># 配置压缩数据大小的最小阀值，默认 2048</span></span><br><span class="line"><span class="attr">feign.compression.request.min-request-size</span>=<span class="string">2048</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-压缩效果"><a href="#3-压缩效果" class="headerlink" title="3. 压缩效果"></a>3. 压缩效果</h2><p>压缩后的响应 Header 包含<code>Content-Encoding:gzip</code>，使用默认的压缩比(6)情况下，<code>18kb</code>数据压缩后为<code>4.7kb</code>，大大减少传输耗时，提高传输效率(数据量越大越明显).</p><p><img src="/images/gzip-result.jpg" alt="效果图"></p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><h3 id="4-1-不推荐压缩的文件类型"><a href="#4-1-不推荐压缩的文件类型" class="headerlink" title="4.1 不推荐压缩的文件类型"></a>4.1 不推荐压缩的文件类型</h3><p><code>jpg,zip,exe</code>等已经经过压缩的数据，没有必要重复压缩，会增加服务端编码解码 cpu 消耗以及延长客户端渲染时间</p><h3 id="4-2-配置压缩阈值（文件大小小于该值不压缩）"><a href="#4-2-配置压缩阈值（文件大小小于该值不压缩）" class="headerlink" title="4.2 配置压缩阈值（文件大小小于该值不压缩）"></a>4.2 配置压缩阈值（文件大小小于该值不压缩）</h3><ul><li><p>Apache 不支持配置阈值，所有响应均压缩</p></li><li><p>Nginx，外置 Tomcat，Feign 支持配置阈值，但生效场景待验证</p></li><li><p>Springboot 支持配置阈值，但只有返回为 String 时才生效，当接口的响应为自定义对象，由于对象大小无法确定，或者对象大于默认的压缩缓冲区大小，所以服务器为了提高效率选择使用分组(chunked)编码，一边压缩一边发送，导致响应头无 Content-Length，需要配合 filter 才能生效。</p><blockquote><p>注意：获取 Content-Length 的代价是把每个响应都先缓存到本地，然后一次性全部发送，与分组编码的设计违背，不建议设置该 filter</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">filterBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    filterBean.setFilter(<span class="keyword">new</span> <span class="title class_">AddContentLengthFilter</span>());</span><br><span class="line">    filterBean.setUrlPatterns(Collections.singletonList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> filterBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AddContentLengthFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 先将响应缓存到本地，以此获取Content-Length，使server.compression.min-response-size生效</span></span><br><span class="line">      ContentCachingResponseWrapper cacheResponseWrapper;</span><br><span class="line">      <span class="keyword">if</span> (!(response <span class="keyword">instanceof</span> ContentCachingResponseWrapper)) &#123;</span><br><span class="line">        cacheResponseWrapper = <span class="keyword">new</span> <span class="title class_">ContentCachingResponseWrapper</span>(response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cacheResponseWrapper = (ContentCachingResponseWrapper) response;</span><br><span class="line">      &#125;</span><br><span class="line">      filterChain.doFilter(request, cacheResponseWrapper);</span><br><span class="line">      cacheResponseWrapper.copyBodyToResponse();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-重复压缩问题"><a href="#4-3-重复压缩问题" class="headerlink" title="4.3 重复压缩问题"></a>4.3 重复压缩问题</h3><p>经测试，Service-&gt;Gateway-&gt;Apache 同时启用压缩的情况下，当前节点会判断上一节点响应的数据是否经过压缩，若已压缩则直接返回，否则按当前节点配置的规则进行压缩。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p>若流量大部分都是从 Apache 进入，推荐只在 Apache 开启压缩。</p><p><strong>原因</strong>：若数据链路多节点均开启 gzip，虽然不存在重复压缩的问题，但出现大多数节点都需要使用响应体而去频繁编码解码的场景时，需要考虑到 CPU 耗时开销。</p><p><strong>当前场景</strong>：响应体在网关被<code>WrapperResponseFilter</code>拦截并解析数据，service 传输过来的 gzip 编码流会导致解析失败，需要手动在网关解析点解码后编码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperResponseFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Object mapper</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> GzipMessageBodyResolver gzipResolver;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Wrapper response filter</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> objectMapper object mapper</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> gzipResolver</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WrapperResponseFilter</span><span class="params">(ObjectMapper objectMapper, GzipMessageBodyResolver gzipResolver)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    <span class="built_in">this</span>.gzipResolver = gzipResolver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * filter</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> exchange exchange</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> chain    chain</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Mono&lt;Void&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//获取response的 返回数据</span></span><br><span class="line">      <span class="type">ServerHttpResponse</span> <span class="variable">originalResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">      <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().get(Constant.FORMAT).get(<span class="number">0</span>);</span><br><span class="line">      <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> originalResponse.getStatusCode();</span><br><span class="line">      <span class="keyword">if</span> (statusCode == HttpStatus.OK) &#123;</span><br><span class="line">        <span class="type">AicResponseDecorator</span> <span class="variable">aicResponseDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AicResponseDecorator</span>(originalResponse, format);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange.mutate().response(aicResponseDecorator).build());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(<span class="string">&quot;请求响应异常&quot;</span>, e);</span><br><span class="line">      <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * getOrder</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> int order</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">AicResponseDecorator</span> <span class="keyword">extends</span> <span class="title class_">ServerHttpResponseDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String format;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AicResponseDecorator</span><span class="params">(ServerHttpResponse delegate, String format)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(delegate);</span><br><span class="line">      <span class="built_in">this</span>.format = format;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出响应</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 输出的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">writeWith</span><span class="params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.writeWith(Flux.from(body).buffer().map(<span class="built_in">this</span>::wrapBuffers));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重构并包装响应，涉及到解码，序列化等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataBuffers 缓冲的响应数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 重构之后重新包装好的响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiNote</span> 关于编码解码问题，仅支持gzip解码编码，若需根据内容编码类型自动解码，</span></span><br><span class="line"><span class="comment">     * 请参照&#123;<span class="doctag">@link</span> org.springframework.cloud.gateway.filter.factory.rewrite.ModifyResponseBodyGatewayFilterFactory&#125;实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DataBuffer <span class="title function_">wrapBuffers</span><span class="params">(List&lt;? extends DataBuffer&gt; dataBuffers)</span> &#123;</span><br><span class="line">      <span class="type">DataBufferFactory</span> <span class="variable">dataBufferFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDataBufferFactory</span>();</span><br><span class="line">      <span class="type">DataBuffer</span> <span class="variable">join</span> <span class="operator">=</span> dataBufferFactory.join(dataBuffers);</span><br><span class="line">      <span class="type">byte</span>[] content = <span class="keyword">new</span> <span class="title class_">byte</span>[join.readableByteCount()];</span><br><span class="line">      join.read(content);</span><br><span class="line">      <span class="comment">//释放掉内存</span></span><br><span class="line">      DataBufferUtils.release(join);</span><br><span class="line">      <span class="comment">//responseData就是下游系统返回的内容,可以查看修改</span></span><br><span class="line">      List&lt;String&gt; encoding = getHeaders().get(HttpHeaders.CONTENT_ENCODING);</span><br><span class="line">      <span class="keyword">if</span> (!CollectionUtils.isEmpty(encoding) &amp;&amp; encoding.contains(Constant.GZIP)) &#123;</span><br><span class="line">        <span class="type">DataBuffer</span> <span class="variable">encodeBuffer</span> <span class="operator">=</span> dataBufferFactory.wrap(handleContent(gzipResolver.decode(content), format));</span><br><span class="line">        <span class="type">byte</span>[] encodedContent = gzipResolver.encode(encodeBuffer);</span><br><span class="line">        DataBufferUtils.release(encodeBuffer);</span><br><span class="line">        <span class="keyword">return</span> getDelegate().bufferFactory().wrap(encodedContent);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> getDelegate().bufferFactory().wrap(handleContent(content, format));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Constant.XML.equals(format)) &#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="built_in">super</span>.getHeaders();</span><br><span class="line">        headers.set(HttpHeaders.CONTENT_TYPE, <span class="string">&quot;application/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理明文响应体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 明文响应体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format  请求格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 重构后的响应体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] handleContent(<span class="type">byte</span>[] content, String format) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">responseData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(content, StandardCharsets.UTF_8);</span><br><span class="line">      <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> DataSerializer.serialize(handleResponse(responseData), format);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(data.getBytes(), StandardCharsets.UTF_8).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理序列化后的响应，解析为&#123;<span class="doctag">@link</span> AicErrorResponse&#125;/&#123;<span class="doctag">@link</span> AicBaseResponse&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseData responseData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map&lt;String, Object&gt;  response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">handleResponse</span><span class="params">(String responseData)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">errorCode</span> <span class="operator">=</span> responseData.contains(<span class="string">&quot;errorCode&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (errorCode) &#123;</span><br><span class="line">          <span class="type">AicErrorResponse</span> <span class="variable">aicErrorResponse</span> <span class="operator">=</span> objectMapper.readValue(responseData, AicErrorResponse.class);</span><br><span class="line">          dataMap.put(<span class="string">&quot;AicErrorResponse&quot;</span>, aicErrorResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="type">AicBaseResponse</span> <span class="variable">aicBaseResponse</span> <span class="operator">=</span> objectMapper.readValue(responseData, AicBaseResponse.class);</span><br><span class="line">          dataMap.put(<span class="string">&quot;AicBaseResponse&quot;</span>, aicBaseResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataMap;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据解析出错,返回报文: &#123;&#125;&quot;</span>, responseData, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AicGatewayException</span>(<span class="string">&quot;数据解析出错&quot;</span>, ModuleEnum.V1_GATEWAY, ErrorEnum.V1_ERR_CODE_05_1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-测试代码"><a href="#6-测试代码" class="headerlink" title="6. 测试代码"></a>6. 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyStoreException, KeyManagementException, IOException &#123;</span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> createAcceptSelfSignedCertificateClient();</span><br><span class="line">    CloseableHttpResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">request_url</span> <span class="operator">=</span> <span class="string">&quot;http://10.225.4.193:8380/test.aic.admin.queryApiName&quot;</span>;</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(request_url.trim());</span><br><span class="line">    request.addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">    request.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    request.setHeader(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJodHRwOlwvXC9haWNhZG1pbi5haWMueCIsInN1YiI6ImFpY19hZG1pbl91c2VyIiwiZXhwIjoxNjQxMjc3NzM4LCJ1c2VyX25hbWUiOiJzdXBlcl9hZG1pbiJ9.WtbdGtXcQ8eF9tGpW2DWB1y757jfFLCrlmgTceof03XjKZkG2nrq78ztyTkntGBICDz05cv8o3gtna49_dnyyg&quot;</span>);</span><br><span class="line">    request.setHeader(<span class="string">&quot;Accept-encoding&quot;</span>, <span class="string">&quot;gzip,deflate,br&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求响应</span></span><br><span class="line">    response = httpClient.execute(request);</span><br><span class="line">    System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> CloseableHttpClient <span class="title function_">createAcceptSelfSignedCertificateClient</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> KeyManagementException, NoSuchAlgorithmException, KeyStoreException &#123;</span><br><span class="line">    <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContextBuilder</span><br><span class="line">      .create()</span><br><span class="line">      .loadTrustMaterial(<span class="keyword">new</span> <span class="title class_">TrustSelfSignedStrategy</span>())</span><br><span class="line">      .build();</span><br><span class="line">    <span class="type">HostnameVerifier</span> <span class="variable">allowAllHosts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoopHostnameVerifier</span>();</span><br><span class="line">    <span class="type">SSLConnectionSocketFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext, allowAllHosts);</span><br><span class="line">    <span class="keyword">return</span> HttpClients</span><br><span class="line">      .custom()</span><br><span class="line"><span class="comment">//      .disableContentCompression()  // apache的httpclient默认支持gzip的解压，除非人为禁用</span></span><br><span class="line">      .setSSLSocketFactory(connectionFactory)</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><ul><li><a href="https://httpd.apache.org/docs/2.4/mod/mod_deflate.html">1. Apache-Deflate-Mod</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">2. Spring-boot-application-properties</a></li><li><a href="https://zhuanlan.zhihu.com/p/375170625">3. SpringBoot 自动压缩（添加 Content-Length）</a></li><li><a href="https://stackoverflow.com/questions/21410317/using-gzip-compression-with-spring-boot-mvc-javaconfig-with-restful">4. Using GZIP compression with Spring Boot/MVC/JavaConfig with RESTful</a></li><li><a href="https://zhuanlan.zhihu.com/p/42418273">5. 简单聊聊 GZIP 的压缩原理与日常应用</a></li><li><a href="https://blog.csdn.net/xjbclz/article/details/52474114">6. Web 服务器处理 HTTP 压缩之 gzip、deflate 压缩</a></li><li><a href="https://www.cnblogs.com/LO-ME/p/7377082.html">7. 前端性能优化成神之路-HTTP 压缩开启 gzip </a></li><li><a href="https://stackoverflow.com/questions/2777076/does-apache-commons-httpclient-support-gzip">8. Does Apache Commons HttpClient support GZIP?</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1492">9. Can’t support compress with gzip when used ModifyResponseBody</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/229">10. spring boot server.compression conflict with feign.compression</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kafka通信下的分布式业务和监控数据回传</title>
      <link href="//posts/95c12d80/"/>
      <url>//posts/95c12d80/</url>
      
        <content type="html"><![CDATA[<h1 id="telegraf-kafka-logstash-influxdb-监控及业务数据回传"><a href="#telegraf-kafka-logstash-influxdb-监控及业务数据回传" class="headerlink" title="telegraf-kafka-logstash-influxdb 监控及业务数据回传"></a>telegraf-kafka-logstash-influxdb 监控及业务数据回传</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>数据来源：监控信息，业务日志(例如：调用记录)，表数据</p></blockquote><table><thead><tr><th>组件</th><th>选择背景</th><th>版本</th></tr></thead><tbody><tr><td>telegraf</td><td>监控 cpu、disk 等系统数据</td><td>1.13.4</td></tr><tr><td>kafka</td><td>客户只提供 kafka 对外交互,且仅提供一个 topic</td><td>2.12-2.8.1 依赖 zookeeper-3.7.0</td></tr><tr><td>logstash</td><td>消费消息、格式化消息</td><td>6.8.0</td></tr><tr><td>influxdb</td><td>时序性，适合存储监控数据</td><td>1.7.9</td></tr></tbody></table><h3 id="telegraf"><a href="#telegraf" class="headerlink" title="telegraf"></a>telegraf</h3><blockquote><p>./telegraf –config etc/telegraf/telegraf.conf</p></blockquote><p><code>telegraf.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[agent]</span><br><span class="line">  interval = &quot;10s&quot;</span><br><span class="line">  round_interval = true</span><br><span class="line">  metric_batch_size = 1000</span><br><span class="line">  metric_buffer_limit = 10000</span><br><span class="line">  collection_jitter = &quot;0s&quot;</span><br><span class="line">  flush_interval = &quot;10s&quot;</span><br><span class="line">  flush_jitter = &quot;0s&quot;</span><br><span class="line">  precision = &quot;&quot;</span><br><span class="line">  hostname = &quot;&quot;</span><br><span class="line">  omit_hostname = false</span><br><span class="line"></span><br><span class="line">[[outputs.kafka]]</span><br><span class="line">  brokers = [&quot;ip:9092&quot;]</span><br><span class="line">  topic = &quot;telegraf&quot;</span><br><span class="line"></span><br><span class="line"># 监控数据</span><br><span class="line">[[inputs.cpu]]</span><br><span class="line">  ## prepend names to your measurements</span><br><span class="line">  # name_suffix = &quot;_ca&quot;</span><br><span class="line">  # name_prefix = &quot;ca_&quot;</span><br><span class="line">  # name_override = &quot;ca_cpu&quot;</span><br><span class="line">  ## add tags</span><br><span class="line">  #  [[inputs.cpu.tags]]</span><br><span class="line">  #    influxdb_database = &quot;ca&quot;</span><br><span class="line"></span><br><span class="line">[[outputs.influxdb]]</span><br><span class="line">  ## use namepass to route to outputs, this will only get ca_cpu</span><br><span class="line">  # namepass = &quot;ca_*&quot;</span><br><span class="line">  </span><br><span class="line">[[outputs.influxdb]]</span><br><span class="line">  urls = [&quot;http://influxdb.example.com&quot;]</span><br><span class="line">  database = &quot;db_default&quot;</span><br><span class="line">  ## Use tags, tagdrop, tagpass routing</span><br><span class="line">  ## metrics will be drop when tag[influxdb_database]=hu </span><br><span class="line">  # [outputs.influxdb.tagdrop]</span><br><span class="line">  #  influxdb_database = [&quot;hu&quot;]</span><br><span class="line">  ## metrics will be pass to db_default when tag[influxdb_database]=ca </span><br><span class="line">  # [ouputs.influxdb.tagpass]</span><br><span class="line">  #   influxdb_database = [&quot;ca&quot;]</span><br><span class="line"></span><br><span class="line">  totalcpu = true</span><br><span class="line">  collect_cpu_time = false</span><br><span class="line">  report_active = false</span><br><span class="line">[[inputs.disk]]</span><br><span class="line">  ignore_fs = [&quot;tmpfs&quot;, &quot;devtmpfs&quot;, &quot;devfs&quot;, &quot;iso9660&quot;, &quot;overlay&quot;, &quot;aufs&quot;, &quot;squashfs&quot;]</span><br><span class="line">[[inputs.diskio]]</span><br><span class="line">[[inputs.kernel]]</span><br><span class="line">[[inputs.mem]]</span><br><span class="line">[[inputs.processes]]</span><br><span class="line">[[inputs.swap]]</span><br><span class="line">[[inputs.system]]</span><br><span class="line"></span><br><span class="line"># 业务日志</span><br><span class="line">[[inputs.tail]]</span><br><span class="line">    files = [&quot;/opt/applog/*.json&quot;]</span><br><span class="line">    watch_method = &quot;poll&quot; # poll/notify</span><br><span class="line"># tag_keys = [&quot;appKey&quot;,&quot;serviceName&quot;]</span><br><span class="line"># json格式只会解析数字值，字符值的键名需要指定</span><br><span class="line">    json_string_fields = [&quot;appKey&quot;,&quot;serviceName&quot;,&quot;apiPath&quot;,&quot;reqParam&quot;,&quot;fromAirline&quot;]</span><br><span class="line">    data_format = &quot;json&quot;</span><br><span class="line"></span><br><span class="line"># 表数据</span><br><span class="line">[[inputs.postgresql_extensible]] </span><br><span class="line">interval = &quot;24h&quot;</span><br><span class="line">address = &quot;host=10.225.9.122:5444 user=aiccloud password=Travel#12 sslmode=disable dbname=aiccloud&quot;</span><br><span class="line">[[inputs.postgresql_extensible.query]]</span><br><span class="line">sqlquery=&quot;select id,service_name,api_path,enable,scope,&#x27;gateway_store&#x27; as table_name,regexp_replace(module_info, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as module_info,regexp_replace(api_operation, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as api_operation,regexp_replace(parent_module, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as parent_module,regexp_replace(current_module, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as current_module,regexp_replace(regexp_replace(regexp_replace(uc_urls, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;), E&#x27;=&#x27;, &#x27;#EQ&#x27;, &#x27;g&#x27;),E&#x27;,&#x27;,&#x27;#CO&#x27;,&#x27;g&#x27;) as uc_urls,regexp_replace(create_date, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as create_date from gateway_store where 1 = 1&quot;</span><br><span class="line">withdbname=true</span><br><span class="line">tagvalue=&quot;table_name&quot; </span><br><span class="line">[[inputs.postgresql_extensible.query]]</span><br><span class="line">sqlquery=&quot;select id,limiter,enable,enable_valid_power,enable_valid_time,enable_valid_sign,&#x27;api_user_define&#x27; as table_name,regexp_replace(belong_airline, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as belong_airline,regexp_replace(secret, E&#x27;=&#x27;, &#x27;#EQ&#x27;, &#x27;g&#x27;) as secret,regexp_replace(path, E&#x27;,&#x27;, &#x27;#CO&#x27;, &#x27;g&#x27;) as path,regexp_replace(watch_airline, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as watch_airline,regexp_replace(app_key, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;) as app_key,to_char(create_time, &#x27;yyyy-MM-dd@HH24:MI:ss&#x27;) as create_time,to_char(valid_time, &#x27;yyyy-MM-dd@HH24:MI:ss&#x27;) as valid_time,regexp_replace(regexp_replace(regexp_replace(remark, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;), E&#x27;=&#x27;, &#x27;#EQ&#x27;, &#x27;g&#x27;), E&#x27;,&#x27;, &#x27;#CO&#x27;, &#x27;g&#x27;) as remark,regexp_replace(regexp_replace(regexp_replace(sat_user, E&#x27;\\\\s+&#x27;, &#x27;#SP&#x27;, &#x27;g&#x27;), E&#x27;=&#x27;, &#x27;#EQ&#x27;, &#x27;g&#x27;), E&#x27;,&#x27;, &#x27;#CO&#x27;, &#x27;g&#x27;) as sat_user from api_user_define where 1 = 1&quot;</span><br><span class="line">withdbname=true</span><br><span class="line">tagvalue=&quot;table_name&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><blockquote><p>./kafka-server-start.sh</p></blockquote><p><code>server.properties</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/opt/app/kafka_2.12-2.8.1/kafka-logs</span><br><span class="line">num.partitions=1</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=zookepper-ip:2181</span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br><span class="line">port=9092</span><br><span class="line">host.name=ip</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><blockquote><p>./zkServer.sh</p></blockquote><p><code>zoo.cfg</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/opt/app/apache-zookeeper-3.7.0/data</span><br><span class="line">dataLogDir=/opt/app/apache-zookeeper-3.7.0/logs</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><blockquote><p>start with specific configuration，reload automatic when config changed.<br><br> <strong>./bin/logstash -f /xxx/logstash/config/logstash.conf –config.reload.automatic</strong></p></blockquote><p><code>logstash.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    beats&#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        type =&gt; &quot;logs&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kafka&#123;</span><br><span class="line">bootstrap_servers =&gt; [&quot;ip:9092&quot;]</span><br><span class="line">client_id =&gt; &quot;kafka-consumer-0&quot;</span><br><span class="line"># group_id用于做物理机实例负载</span><br><span class="line">group_id =&gt; &quot;kafka-consumer&quot;</span><br><span class="line">decorate_events =&gt; true</span><br><span class="line">auto_offset_reset =&gt; &quot;earliest&quot;</span><br><span class="line"># 与topic分区数相同</span><br><span class="line">consumer_threads =&gt; 1</span><br><span class="line">topics =&gt; [&quot;telegraf&quot;]</span><br><span class="line">type =&gt; &quot;sys&quot;</span><br><span class="line"></span><br><span class="line">        # kafka 验证</span><br><span class="line">        # https://www.elastic.co/guide/en/logstash/current/plugins-inputs-kafka.html#plugins-inputs-kafka-jaas_path</span><br><span class="line">        # jaas_path 、 kerberos_config 文件内的配置会被加载到JVM全局系统变量中. 意味着多个Kafka输入组件将共享该配置. 如果不想这样，需要启动不同的Logstash(JVM)实例 </span><br><span class="line">        jaas_path =&gt; &quot;path&quot;</span><br><span class="line"></span><br><span class="line">        # https://www.elastic.co/guide/en/logstash/7.3/plugins-inputs-kafka.html#plugins-inputs-kafka-sasl_jaas_config</span><br><span class="line">        # 自 logstash-7.3 新增 sasl_jaas_config 配置方式，与 jaas_path 不同的是，其作用域仅在组件本身</span><br><span class="line">        sasl_jaas_config =&gt; &quot;org.apache.kafka.common.security.plain.PlainLoginModule required username=&#x27;auser&#x27;  password=&#x27;apassword&#x27;;&quot;</span><br><span class="line">        sasl_mechanism =&gt; &quot;PLAIN&quot;</span><br><span class="line">        security_protocol =&gt; &quot;SASL_PLAINTEXT&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kafka&#123;</span><br><span class="line">bootstrap_servers =&gt; [&quot;ip:9092&quot;]</span><br><span class="line">client_id =&gt; &quot;kafka-consumer-1&quot;</span><br><span class="line">group_id =&gt; &quot;kafka-consumer&quot;</span><br><span class="line">decorate_events =&gt; true</span><br><span class="line">auto_offset_reset =&gt; &quot;earliest&quot;</span><br><span class="line">consumer_threads =&gt; 1</span><br><span class="line">topics =&gt; [&quot;topic_name&quot;]</span><br><span class="line">type =&gt; &quot;kafka&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">if[type] == &quot;logs&quot;&#123;</span><br><span class="line">dissect &#123;</span><br><span class="line">mapping =&gt; &#123;</span><br><span class="line">&quot;message&quot; =&gt; &quot;[%&#123;timestamp&#125;] [%&#123;clientip&#125;] [%&#123;serverName&#125;] [%&#123;traceId&#125;] [%&#123;spanId&#125;] [%&#123;logLevel&#125;] [%&#123;logPoint&#125;] [%&#123;line&#125;] - [%&#123;msg&#125;]&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if[type] == &quot;kafka&quot; or [type] == &quot;sys&quot; &#123;</span><br><span class="line">mutate &#123;</span><br><span class="line">gsub =&gt; [</span><br><span class="line"># 去除各类转义字符</span><br><span class="line">&quot;message&quot;, &quot;[\\\r\n]&quot;, &quot;&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dissect &#123;</span><br><span class="line">mapping =&gt; &#123;</span><br><span class="line">&quot;message&quot; =&gt; &quot;%&#123;msg_type&#125;,%&#123;msg&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">add_tag =&gt; [&quot;%&#123;msg_type&#125;&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if &quot;tail&quot; in [tags] &#123;</span><br><span class="line">dissect &#123;</span><br><span class="line">mapping =&gt; &#123;</span><br><span class="line">&quot;msg&quot; =&gt; &quot;%&#123;tailmsg&#125; %&#123;+tailmsg&#125; %&#123;timestamp&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">kv &#123;</span><br><span class="line">source =&gt; &quot;tailmsg&quot;</span><br><span class="line">field_split =&gt; &quot;, &quot;</span><br><span class="line">&#125;</span><br><span class="line">mutate &#123;</span><br><span class="line">gsub =&gt; [</span><br><span class="line">&quot;reqParam&quot;,&quot;#&quot;,&quot;,&quot;,</span><br><span class="line">&quot;reqParam&quot;,&quot;@&quot;,&quot; &quot;</span><br><span class="line">]</span><br><span class="line">convert =&gt; &#123;</span><br><span class="line">&quot;apiAccessTime&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&quot;apiUsedTime&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&quot;day&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&quot;month&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&quot;week&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&quot;year&quot; =&gt; &quot;integer&quot;</span><br><span class="line">&#125;</span><br><span class="line">remove_field =&gt; [&quot;tailmsg&quot;,&quot;msg&quot;,&quot;msg_type&quot;,&quot;host&quot;,&quot;message&quot;,&quot;path&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if &quot;postgresql&quot; in [tags] &#123;</span><br><span class="line">dissect &#123;</span><br><span class="line">mapping =&gt; &#123;</span><br><span class="line">&quot;msg&quot; =&gt; &quot;%&#123;db&#125;,%&#123;vmhost&#125;,server=%&#123;host&#125; %&#123;user&#125; %&#123;dbname&#125;,table_name=%&#123;table_name&#125; %&#123;postgresql_msg&#125; %&#123;timestamp&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">add_tag =&gt; [&quot;%&#123;table_name&#125;&quot;]</span><br><span class="line">remove_tag =&gt; [&quot;postgresql&quot;]</span><br><span class="line">&#125;</span><br><span class="line">kv &#123;</span><br><span class="line">source =&gt; &quot;postgresql_msg&quot;</span><br><span class="line">field_split =&gt; &quot;,&quot;</span><br><span class="line">remove_field =&gt; [&quot;db&quot;,&quot;vmhost&quot;,&quot;host&quot;,&quot;user&quot;,&quot;dbname&quot;,&quot;postgresql_msg&quot;,&quot;msg&quot;,&quot;msg_type&quot;,&quot;message&quot;]</span><br><span class="line">&#125;</span><br><span class="line">if &quot;gateway_store&quot; in [tags] &#123;</span><br><span class="line">mutate &#123;</span><br><span class="line">gsub =&gt; [</span><br><span class="line">&quot;module_info&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;api_operation&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;parent_module&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;current_module&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;uc_urls&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;uc_urls&quot;,&quot;#EQ&quot;,&quot;=&quot;,</span><br><span class="line">&quot;uc_urls&quot;,&quot;#CO&quot;,&quot;,&quot;,</span><br><span class="line">&quot;create_date&quot;,&quot;#SP&quot;,&quot; &quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if &quot;api_user_define&quot; in [tags] &#123;</span><br><span class="line">mutate &#123;</span><br><span class="line">gsub =&gt; [</span><br><span class="line">&quot;belong_airline&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;secret&quot;,&quot;#EQ&quot;,&quot;=&quot;,</span><br><span class="line">&quot;path&quot;,&quot;#CO&quot;,&quot;,&quot;,</span><br><span class="line">&quot;watch_airline&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;app_key&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;create_time&quot;,&quot;@&quot;,&quot; &quot;,</span><br><span class="line">&quot;valid_time&quot;,&quot;@&quot;,&quot; &quot;,</span><br><span class="line">&quot;remark&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;remark&quot;,&quot;#EQ&quot;,&quot;=&quot;,</span><br><span class="line">&quot;remark&quot;,&quot;#CO&quot;,&quot;,&quot;,</span><br><span class="line">&quot;sat_user&quot;,&quot;#SP&quot;,&quot; &quot;,</span><br><span class="line">&quot;sat_user&quot;,&quot;#EQ&quot;,&quot;=&quot;,</span><br><span class="line">&quot;sat_user&quot;,&quot;#CO&quot;,&quot;,&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if &quot;cpu&quot; in [tags] or &quot;system&quot; in [tags] or &quot;swap&quot; in [tags] or &quot;processes&quot; in [tags] or &quot;mem&quot; in [tags] or &quot;kernel&quot; in [tags] or &quot;disk&quot; in [tags] or &quot;diskio&quot; in [tags]&#123;</span><br><span class="line">dissect &#123;</span><br><span class="line">mapping =&gt; &#123;</span><br><span class="line">&quot;msg&quot; =&gt; &quot;%&#123;sysmsg&#125; %&#123;+sysmsg&#125; %&#123;timestamp&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">kv &#123;</span><br><span class="line">source =&gt; &quot;sysmsg&quot;</span><br><span class="line">field_split =&gt; &quot;, &quot;</span><br><span class="line">remove_field =&gt; [&quot;sysmsg&quot;,&quot;msg&quot;,&quot;message&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line"></span><br><span class="line">if[type] == &quot;logs&quot;&#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [&quot;xxx.xxx.xxx.xxx:9201&quot;,&quot;&quot;xxx.xxx.xxx.xxx:9201&quot;,&quot;&quot;xxx.xxx.xxx.xxx&quot;,&quot;&quot;xxx.xxx.xxx.xxx&quot;]</span><br><span class="line">index =&gt; &quot;app-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">user =&gt; &quot;username&quot;</span><br><span class="line">password =&gt; &quot;password&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if[type] == &quot;kafka&quot; or [type] == &quot;sys&quot;&#123;</span><br><span class="line">if &quot;tail&quot; in [tags] &#123;</span><br><span class="line">influxdb &#123;</span><br><span class="line">db =&gt; &quot;dbname&quot;</span><br><span class="line">host =&gt; &quot;ip&quot;</span><br><span class="line">port =&gt; &quot;8086&quot;</span><br><span class="line">user =&gt; &quot;username&quot;</span><br><span class="line">password =&gt; &quot;password&quot;</span><br><span class="line">measurement =&gt; &quot;measurement_name&quot;</span><br><span class="line">use_event_fields_for_data_points =&gt; true</span><br><span class="line">exclude_fields =&gt; [&quot;@timestamp&quot;, &quot;@version&quot;,&quot;type&quot;]</span><br><span class="line">send_as_tags =&gt; [&quot;apiPath&quot;,&quot;timestamp&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if &quot;gateway_store&quot; in [tags] or &quot;api_user_define&quot; in [tags] &#123;</span><br><span class="line">influxdb &#123;</span><br><span class="line">db =&gt; &quot;dbname&quot;</span><br><span class="line">host =&gt; &quot;ip&quot;</span><br><span class="line">port =&gt; &quot;8086&quot;</span><br><span class="line">user =&gt; &quot;username&quot;</span><br><span class="line">password =&gt; &quot;password&quot;</span><br><span class="line">measurement =&gt; &quot;%&#123;table_name&#125;&quot;</span><br><span class="line">use_event_fields_for_data_points =&gt; true</span><br><span class="line">exclude_fields =&gt; [&quot;@timestamp&quot;, &quot;@version&quot;,&quot;type&quot;,&quot;table_name&quot;]</span><br><span class="line">send_as_tags =&gt; [&quot;id&quot;]</span><br><span class="line">retention_policy =&gt; &quot;rp_one_day&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if &quot;cpu&quot; in [tags] or &quot;system&quot; in [tags] or &quot;swap&quot; in [tags] or &quot;processes&quot; in [tags] or &quot;mem&quot; in [tags] or &quot;kernel&quot; in [tags] or &quot;disk&quot; in [tags] or &quot;diskio&quot; in [tags] &#123;</span><br><span class="line">influxdb &#123;</span><br><span class="line">db =&gt; &quot;dbname&quot;</span><br><span class="line">host =&gt; &quot;ip&quot;</span><br><span class="line">port =&gt; &quot;8086&quot;</span><br><span class="line">user =&gt; &quot;username&quot;</span><br><span class="line">password =&gt; &quot;password&quot;</span><br><span class="line">measurement =&gt; &quot;%&#123;msg_type&#125;&quot;</span><br><span class="line">use_event_fields_for_data_points =&gt; true</span><br><span class="line">exclude_fields =&gt; [&quot;@timestamp&quot;, &quot;@version&quot;,&quot;type&quot;,&quot;msg_type&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">stdout &#123; codec =&gt; json &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a>influxdb</h3><blockquote><p>nohup usr/bin/influxd –config etc/influxdb/influxdb.conf &gt; /opt/applog/influxDb/influxdb.log &amp;</p></blockquote><p><code>influxdb.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[meta]</span><br><span class="line">  dir = &quot;/opt/app/influxdb-1.7.9-1/var/lib/influxdb/meta&quot;</span><br><span class="line">[data]</span><br><span class="line">  dir = &quot;/opt/app/influxdb-1.7.9-1/var/lib/influxdb/data&quot;</span><br><span class="line">  wal-dir = &quot;/opt/app/influxdb-1.7.9-1/var/lib/influxdb/wal&quot;</span><br><span class="line"></span><br><span class="line">[admin]</span><br><span class="line">  enabled = true</span><br><span class="line">  bind-address = &quot;:8083&quot;</span><br><span class="line"></span><br><span class="line">[http]</span><br><span class="line">  enabled = true</span><br><span class="line">  bind-address = &quot;:8086&quot;</span><br><span class="line">  auth-enabled = false</span><br><span class="line">  https-enabled = false</span><br><span class="line">  bind-socket = &quot;/var/run/influxdb.sock&quot;</span><br><span class="line"></span><br><span class="line">[[udp]]</span><br><span class="line">  bind-address = &quot;:8089&quot;</span><br><span class="line">  database = &quot;udp&quot;</span><br><span class="line">  retention-policy = &quot;&quot;</span><br><span class="line">  batch-size = 5000</span><br><span class="line">  batch-pending = 10</span><br><span class="line">  batch-timeout = &quot;1s&quot;</span><br><span class="line">  read-buffer = 0</span><br><span class="line"></span><br><span class="line">[continuous_queries]</span><br><span class="line">  enabled = true</span><br><span class="line">  log-enabled = true</span><br><span class="line">  run-interval = &quot;1s&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><ul><li><p>influxdb 分布式版本闭源，目前只有单机版，写入压力过大时有崩溃风险</p><ul><li>1.推荐只用来收集监控数据，时序性一般只对监控有意义；</li><li>2.大量的业务数据推荐使用分布式 es 代替</li></ul></li><li><p>influxdb 是通过 time+tags 保证数据的唯一性，批量入库时若无 tag（或 tag 值相同），由于 time 相同，会产生数据覆盖</p><ul><li>1.提高 time 精度;</li><li>2.取每批数据中能作主键的字段为 tag，例 logstash: send_as_tags =&gt; [“id”]</li></ul></li><li><p>出现单条记录中的业务数据项存到 kafka 里时乱序（k1=v1,k2=v2 =&gt; k2=v2,k1=v1）的情况，导致 logstash 只能做键值拆分时，容易被数据项的值影响（如包含空格：k1=v 1,k2=v2）而分割错误，产生脏数据</p><ul><li>1.采集时对影响分割的特殊字符(空格等)做替换，分割后使用 mutate =&gt; gsub 替换回来再入库；</li><li>2.业务数据不经过 kafka，直接通过 logstash 或者 filebeat 采集 log</li><li>3.采集时将数据项放到 tag 中，保证有序，如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># telegraf</span><br><span class="line">[[inputs.postgresql_extensible.query]]</span><br><span class="line">tagvalue=&quot;column1,column2&quot;</span><br><span class="line"></span><br><span class="line">[[inputs.tail]]</span><br><span class="line">tag_keys=[&quot;key1&quot;,&quot;key2&quot;]</span><br><span class="line">data_format=&quot;json&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术方案 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
